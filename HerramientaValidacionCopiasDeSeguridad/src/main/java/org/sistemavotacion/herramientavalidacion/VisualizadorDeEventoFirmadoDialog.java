package org.sistemavotacion.herramientavalidacion;

import java.awt.Frame;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileOutputStream;
import java.net.URL;
import java.security.Security;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;
import org.sistemavotacion.Contexto;
import org.sistemavotacion.herramientavalidacion.ArchivoFirmadoPanel;
import org.sistemavotacion.herramientavalidacion.InformacionEventoPanel;
import org.sistemavotacion.util.DateUtils;
import org.sistemavotacion.util.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
* @author jgzornoza
* Licencia: https://github.com/jgzornoza/HerramientaValidacionCopiasDeSeguridad/blob/master/licencia.txt
*/
public class VisualizadorDeEventoFirmadoDialog extends JDialog implements ItemListener {
    
    private static Logger logger = LoggerFactory.getLogger(
            VisualizadorDeEventoFirmadoDialog.class);

    private Frame parentFrame;
    private String directorioArchivo;
    private boolean mostrandoPantallaEnvio = false;
    private String mensajeMime;
    List<File> listaArchivos;
    private int selectedFileIndex;
    String tituloDialogo;
    
    @Override
    public void itemStateChanged(ItemEvent ie) {
        ArchivoFirmadoPanel archivoFirmado = 
                (ArchivoFirmadoPanel)tabbedPane.getSelectedComponent();
        archivoFirmado.setInformacionConFormato(checkBox.isSelected());
    }
    
    /**
     * Creates new form VisualizadorDeEventoFirmadoDialog
     */
    public VisualizadorDeEventoFirmadoDialog(Frame parent, boolean modal) {
        super(parent, modal);
        try {
            this.parentFrame = parent;
            setLocationRelativeTo(null);           
            initComponents();
            progressBar.setIndeterminate(true);
            tabbedPane.setVisible(false);
            checkBox.setVisible(false);
            checkBox.addItemListener(this);
            guardarButton.setVisible(false);
            navegacionPanel.setVisible(false);
            mostrarPantallaEnvio(false);
            pack();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    } 
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new org.sistemavotacion.herramientavalidacion.ClosableTabbedPane();
        progressBarPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        mensajeLabel = new javax.swing.JLabel();
        botonesPanel = new javax.swing.JPanel();
        cerrarButton = new javax.swing.JButton();
        guardarButton = new javax.swing.JButton();
        navegacionPanel = new javax.swing.JPanel();
        siguienteButton = new javax.swing.JButton();
        anteriorButton = new javax.swing.JButton();
        checkBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        mensajeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mensajeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout progressBarPanelLayout = new javax.swing.GroupLayout(progressBarPanel);
        progressBarPanel.setLayout(progressBarPanelLayout);
        progressBarPanelLayout.setHorizontalGroup(
            progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mensajeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE))
                .addContainerGap())
        );
        progressBarPanelLayout.setVerticalGroup(
            progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mensajeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        cerrarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/cancel_16x16.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/sistemavotacion/herramientavalidacion/Bundle"); // NOI18N
        cerrarButton.setText(bundle.getString("VisualizadorDeEventoFirmadoDialog.cerrarButton.text")); // NOI18N
        cerrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarButtonActionPerformed(evt);
            }
        });

        guardarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/filesave_16x16.png"))); // NOI18N
        guardarButton.setText(bundle.getString("VisualizadorDeEventoFirmadoDialog.guardarButton.text")); // NOI18N
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        siguienteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/arrowRight.png"))); // NOI18N
        siguienteButton.setText(bundle.getString("VisualizadorDeEventoFirmadoDialog.siguienteButton.text")); // NOI18N
        siguienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteButtonActionPerformed(evt);
            }
        });

        anteriorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/arrowLeft.png"))); // NOI18N
        anteriorButton.setText(bundle.getString("VisualizadorDeEventoFirmadoDialog.anteriorButton.text")); // NOI18N
        anteriorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navegacionPanelLayout = new javax.swing.GroupLayout(navegacionPanel);
        navegacionPanel.setLayout(navegacionPanelLayout);
        navegacionPanelLayout.setHorizontalGroup(
            navegacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navegacionPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(anteriorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(siguienteButton))
        );
        navegacionPanelLayout.setVerticalGroup(
            navegacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navegacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(siguienteButton)
                .addComponent(anteriorButton))
        );

        checkBox.setText(bundle.getString("VisualizadorDeEventoFirmadoDialog.checkBox.text")); // NOI18N

        javax.swing.GroupLayout botonesPanelLayout = new javax.swing.GroupLayout(botonesPanel);
        botonesPanel.setLayout(botonesPanelLayout);
        botonesPanelLayout.setHorizontalGroup(
            botonesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botonesPanelLayout.createSequentialGroup()
                .addComponent(checkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(navegacionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guardarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cerrarButton)
                .addContainerGap())
        );
        botonesPanelLayout.setVerticalGroup(
            botonesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botonesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(botonesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkBox)
                    .addGroup(botonesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(botonesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cerrarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(guardarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(navegacionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public File abrirArchivoFirmado() {
        File file = null;
        try {
            final JFileChooser chooser = new JFileChooser();
            int returnVal = chooser.showOpenDialog(parentFrame);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = chooser.getSelectedFile();
                if (file != null) mostrarArchivo(file);
            }
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
        return file;
    }
    
    private void cerrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cerrarButtonActionPerformed

    private void siguienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteButtonActionPerformed
        if (selectedFileIndex == listaArchivos.size() -1)  selectedFileIndex = 0;
        else ++selectedFileIndex;
        tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
        mostrarArchivoDeLista(listaArchivos.get(selectedFileIndex));
    }//GEN-LAST:event_siguienteButtonActionPerformed

    private void anteriorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorButtonActionPerformed
        if (selectedFileIndex == 0)  selectedFileIndex = listaArchivos.size() -1;
        else --selectedFileIndex;
        tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
        mostrarArchivoDeLista(listaArchivos.get(selectedFileIndex));
    }//GEN-LAST:event_anteriorButtonActionPerformed

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        guardarMensajeMime();
    }//GEN-LAST:event_guardarButtonActionPerformed
    
    public File abrirZipConFirmas() {
        File zipConFirmas = mostrarDialogoAperturaZip();
        if (zipConFirmas == null) return null;
        mostrarZipConFirmas(zipConFirmas);
        return zipConFirmas;
    }
    
    private void mostrarArchivo (File file) {
        directorioArchivo = file.getParent();
        String titulo = (tituloDialogo == null ? file.getName() : tituloDialogo + " - " + file.getName());
        setTitle(titulo);
        try {
            int indiceArchivo = tabbedPane.indexOfFile (file);
            if (indiceArchivo != -1 && tabbedPane.getTabCount() >1) {
                tabbedPane.setSelectedIndex(indiceArchivo);
                return;
            }
            byte[] bytes = FileUtils.getBytesFromFile(file);
            ArchivoFirmadoPanel archivoFirmadoPanel = new ArchivoFirmadoPanel(file);
            archivoFirmadoPanel.setInformacionConFormato(checkBox.isSelected());
            tabbedPane.addTab(file, archivoFirmadoPanel);
            tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
            tabbedPane.setVisible(true);
            pack();
        } catch (Exception ex) {
            mostrarPantallaError();
            logger.error("mostradaPantallaError - " + ex.getMessage(), ex);
        }
    }
    
    private void mostrarArchivoDeLista (File file) {
        try {
            tabbedPane.setTitleAt(1, "<html>" + file.getName() + "&nbsp;&nbsp;&nbsp;&nbsp;</html>");
            ArchivoFirmadoPanel archivoFirmadoPanel = (ArchivoFirmadoPanel) tabbedPane.getComponentAt(1);
                archivoFirmadoPanel.mostrarArchivo(file);              
            archivoFirmadoPanel.setInformacionConFormato(checkBox.isSelected());
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }

    private void mostrarPantallaEnvio (boolean visibility) {
        mostrandoPantallaEnvio = visibility;
        progressBarPanel.setVisible(visibility);
        tabbedPane.setVisible(!visibility);
        checkBox.setVisible(!visibility);
        botonesPanel.setVisible(!visibility);
        pack();
    }

    private void mostrarPantallaError () {
        botonesPanel.setVisible(false);
        tabbedPane.setVisible(false);
        pack();
    }

    public void mostrarEvento (final URL url, final String titulo) {
        mostrarPantallaEnvio(true);
        setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualizadorDeEventoFirmadoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualizadorDeEventoFirmadoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualizadorDeEventoFirmadoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualizadorDeEventoFirmadoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VisualizadorDeEventoFirmadoDialog dialog = 
                        new VisualizadorDeEventoFirmadoDialog(new javax.swing.JFrame(), true);
                dialog.setVisible(true);
                dialog.mensajeLabel.setText("<html><b>Cargando archivo</b></html>");
                dialog.mostrarPantallaEnvio(true);
/*                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                //File file =  new File("/home/jj/git/ClienteDNIe/eventoParaVotar");
                File file =  new File("/home/jj/temp/eventoParaVotar");
                dialog.inicializar(file);
                dialog.setVisible(true);*/
            }
        });
    }
    
    public void guardarMensajeMime () {
        try {
            final JFileChooser chooser = new JFileChooser();
            int returnVal = chooser.showSaveDialog(parentFrame);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                if (file.getName().indexOf(".") == -1) {
                    String fileName = file.getAbsolutePath() + "."
                            + FileUtils.SIGNED_FILE_EXTENSION;
                    file = new File(fileName);
                    if (file != null) {
                        FileOutputStream fos = new FileOutputStream(file);
                        fos.write(mensajeMime.getBytes());
                        fos.close();
                    }
                }
            }
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }
    
     private boolean comprobarArchivo (File file) {
        logger.debug("comprobarArchivo");
        boolean resultado = true;
        try {
            if (file.length() > AppletHerramienta.MAXIMO_TAMANYO_ARCHIVO_EN_BYTES) {
                String message = AppletHerramienta.getString("fileSizeExceededMsg", 
                        file.length() , AppletHerramienta.MAXIMO_TAMANYO_ARCHIVO_EN_BYTES);

                resultado = false;
            }
        } catch (Exception ex) {
            return false;
        }
        return resultado;
    }
    
    private class FiltroCMS implements java.io.FileFilter {
        @Override
        public boolean accept(File file) {
            return comprobarArchivo(file);
        }
    }

    public String getFechaFirmaLabelText (Date date) {
        String dateString = DateUtils.getStringFromDate(date);
        return "<html><b>Fecha de la firma:</b> " + dateString + "</html>";
    }

    private File mostrarDialogoAperturaZip () {
        File result = null;
        try {
            final JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new FileFilter() {
                @Override
                public boolean accept(File f) {
                    return f.getName().toLowerCase().endsWith(".zip") || f.isDirectory();
                }

                public String getDescription() {
                    return "ZIP Files";
                }
            });
            Frame frame;
            Frame[] frames = JFrame.getFrames();
            if(frames.length == 0 || frames[0] == null) frame = new javax.swing.JFrame();
            else frame = frames[0];
            int returnVal = chooser.showOpenDialog(frame);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                result = chooser.getSelectedFile();
            }
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            return result;
        }
        return result;
    }
    
    private void mostrarZipConFirmas(File zip) {
        logger.debug("mostrarZipConFirmas - file: " + zip.getAbsolutePath());
        File metaInfFile = null;
        try {
            ZipFile zipFile = new ZipFile(zip);
            new File(FileUtils.APPTEMPDIR + File.separator + 
                    zip.getName()).mkdirs();
            setTitle(zip.getName());
            listaArchivos = new ArrayList<File>();
            Enumeration entries = zipFile.entries();
            while(entries.hasMoreElements()) {
                ZipEntry entry = (ZipEntry)entries.nextElement();
                File archivoDestino = new File(
                        FileUtils.APPTEMPDIR + File.separator + 
                        zip.getName() + File.separator + entry.getName());
                if(entry.isDirectory()) {
                    archivoDestino.mkdirs();
                    continue;
                }
                FileUtils.copyStreamToFile(
                        zipFile.getInputStream(entry), archivoDestino);
                if(comprobarArchivo(archivoDestino)){
                    if ("meta.inf".equals(entry.getName())) metaInfFile = archivoDestino;
                    else listaArchivos.add(archivoDestino);
                }
            }
            zipFile.close();
            mostrarPantallaEnvio(false);
            InformacionEventoPanel informacionEventoPanel = 
                new InformacionEventoPanel(metaInfFile);
            tabbedPane.removeAll();
            tabbedPane.addTab("<html><b>" + zip.getName() + "</b>&nbsp;&nbsp;&nbsp;&nbsp;</html>", 
                informacionEventoPanel);
            logger.debug("Numero archivos en lista: " + listaArchivos.size());
            selectedFileIndex = 0;
            File primerArchivo = listaArchivos.get(selectedFileIndex++);
            ArchivoFirmadoPanel archivoFirmadoPanel = new ArchivoFirmadoPanel(primerArchivo);
            archivoFirmadoPanel.setInformacionConFormato(checkBox.isSelected());
            tabbedPane.addTab(primerArchivo.getName(), archivoFirmadoPanel);
            tabbedPane.setSelectedIndex(0);
            tabbedPane.setVisible(true);
            navegacionPanel.setVisible(true);
        } catch (ZipException ex) {/*
            File directorioArchivo = archivo.getParentFile();
            listaArchivosCMS = Arrays.asList(directorioArchivo.listFiles(new FiltroCMS()));
            selectedFileIndex = listaArchivosCMS.indexOf(archivo);
            if (listaArchivosCMS.size() < 2) habilitarBotones(false);
            else habilitarBotones(true);
            contexto = Contexto.EXPLORANDO_DIRECTORIO;
            mostrarArchivo(archivo);
            mostrarPantallaEnvio(false);*/
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            mostrarPantallaEnvio(false);
        }        
    }

        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anteriorButton;
    private javax.swing.JPanel botonesPanel;
    private javax.swing.JButton cerrarButton;
    private javax.swing.JCheckBox checkBox;
    private javax.swing.JButton guardarButton;
    private javax.swing.JLabel mensajeLabel;
    private javax.swing.JPanel navegacionPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel progressBarPanel;
    private javax.swing.JButton siguienteButton;
    private org.sistemavotacion.herramientavalidacion.ClosableTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
