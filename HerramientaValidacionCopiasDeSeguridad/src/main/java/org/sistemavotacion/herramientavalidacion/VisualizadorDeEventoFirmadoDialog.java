package org.sistemavotacion.herramientavalidacion;

import java.awt.Frame;
import java.io.File;
import java.io.FileOutputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import org.sistemavotacion.Contexto;
import org.sistemavotacion.herramientavalidacion.backup.ValidatorListener;
import org.sistemavotacion.herramientavalidacion.modelo.SignedFile;
import org.sistemavotacion.herramientavalidacion.modelo.MetaInf;
import org.sistemavotacion.modelo.Respuesta;
import org.sistemavotacion.modelo.Tipo;
import org.sistemavotacion.util.DateUtils;
import org.sistemavotacion.util.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
* @author jgzornoza
* Licencia: https://github.com/jgzornoza/SistemaVotacion/wiki/Licencia
*/
public class VisualizadorDeEventoFirmadoDialog extends JDialog {
    
    private static Logger logger = LoggerFactory.getLogger(
            VisualizadorDeEventoFirmadoDialog.class);

    private Frame parentFrame;
    private String directorioArchivo;
    private boolean mostrandoPantallaEnvio = false;
    private String mensajeMime;
    private List<SignedFile> signedFileList = new ArrayList<SignedFile>();

    private int selectedFileIndex;
    private String tituloDialogo;
    private MetaInf metaInf;
    private String decompressedBackupBaseDir = null;
    
    /**
     * Creates new form VisualizadorDeEventoFirmadoDialog
     */
    public VisualizadorDeEventoFirmadoDialog(Frame parent, boolean modal) {
        super(parent, modal);
        try {
            this.parentFrame = parent;
            setLocationRelativeTo(null);           
            initComponents();
            progressBar.setIndeterminate(true);
            tabbedPane.setVisible(false);
            guardarButton.setVisible(false);
            navegacionPanel.setVisible(false);
            validateBackupButton.setVisible(false);
            mostrarPantallaEnvio(false);
            setResizable(true);
            pack();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    } 
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new org.sistemavotacion.herramientavalidacion.ClosableTabbedPane();
        progressBarPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        mensajeLabel = new javax.swing.JLabel();
        botonesPanel = new javax.swing.JPanel();
        cerrarButton = new javax.swing.JButton();
        guardarButton = new javax.swing.JButton();
        navegacionPanel = new javax.swing.JPanel();
        siguienteButton = new javax.swing.JButton();
        anteriorButton = new javax.swing.JButton();
        validateBackupButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));

        mensajeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mensajeLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout progressBarPanelLayout = new javax.swing.GroupLayout(progressBarPanel);
        progressBarPanel.setLayout(progressBarPanelLayout);
        progressBarPanelLayout.setHorizontalGroup(
            progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mensajeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE))
                .addContainerGap())
        );
        progressBarPanelLayout.setVerticalGroup(
            progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mensajeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        cerrarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/cancel_16x16.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/sistemavotacion/herramientavalidacion/Bundle"); // NOI18N
        cerrarButton.setText(bundle.getString("VisualizadorDeEventoFirmadoDialog.cerrarButton.text")); // NOI18N
        cerrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarButtonActionPerformed(evt);
            }
        });

        guardarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/filesave_16x16.png"))); // NOI18N
        guardarButton.setText(bundle.getString("VisualizadorDeEventoFirmadoDialog.guardarButton.text")); // NOI18N
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        siguienteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/arrowRight.png"))); // NOI18N
        siguienteButton.setText(bundle.getString("VisualizadorDeEventoFirmadoDialog.siguienteButton.text")); // NOI18N
        siguienteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteButtonActionPerformed(evt);
            }
        });

        anteriorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/arrowLeft.png"))); // NOI18N
        anteriorButton.setText(bundle.getString("VisualizadorDeEventoFirmadoDialog.anteriorButton.text")); // NOI18N
        anteriorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navegacionPanelLayout = new javax.swing.GroupLayout(navegacionPanel);
        navegacionPanel.setLayout(navegacionPanelLayout);
        navegacionPanelLayout.setHorizontalGroup(
            navegacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navegacionPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(anteriorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(siguienteButton))
        );
        navegacionPanelLayout.setVerticalGroup(
            navegacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navegacionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(siguienteButton)
                .addComponent(anteriorButton))
        );

        validateBackupButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/ValidateBackup_26x16.png"))); // NOI18N
        validateBackupButton.setText(bundle.getString("VisualizadorDeEventoFirmadoDialog.validateBackupButton.text")); // NOI18N
        validateBackupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateBackupButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout botonesPanelLayout = new javax.swing.GroupLayout(botonesPanel);
        botonesPanel.setLayout(botonesPanelLayout);
        botonesPanelLayout.setHorizontalGroup(
            botonesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botonesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(validateBackupButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addComponent(navegacionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guardarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cerrarButton)
                .addContainerGap())
        );
        botonesPanelLayout.setVerticalGroup(
            botonesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botonesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(botonesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(validateBackupButton)
                    .addGroup(botonesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(botonesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cerrarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(guardarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(navegacionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public File abrirArchivoFirmado() {
        File file = null;
        try {
            final JFileChooser chooser = new JFileChooser();
            int returnVal = chooser.showOpenDialog(parentFrame);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = chooser.getSelectedFile();
                if (file != null) mostrarArchivo(file);
            }
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
        return file;
    }
    
    private void cerrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cerrarButtonActionPerformed

    private void siguienteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteButtonActionPerformed
        if (selectedFileIndex == signedFileList.size() -1)  selectedFileIndex = 0;
        else ++selectedFileIndex;
        tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
        showSignedFile(signedFileList.get(selectedFileIndex));
    }//GEN-LAST:event_siguienteButtonActionPerformed

    private void anteriorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorButtonActionPerformed
        if (selectedFileIndex == 0)  selectedFileIndex = signedFileList.size() -1;
        else --selectedFileIndex;
        tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
        showSignedFile(signedFileList.get(selectedFileIndex));
    }//GEN-LAST:event_anteriorButtonActionPerformed

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        guardarMensajeMime();
    }//GEN-LAST:event_guardarButtonActionPerformed

    private void validateBackupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateBackupButtonActionPerformed
        ValidateBackupDialog validationDialog = new ValidateBackupDialog(
                parentFrame, metaInf, false);
        try {
            validationDialog.initValidation(decompressedBackupBaseDir);
        } catch(Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }//GEN-LAST:event_validateBackupButtonActionPerformed
    
    private void mostrarArchivo (File file) {
        directorioArchivo = file.getParent();
        String titulo = (tituloDialogo == null ? file.getName() : tituloDialogo + " - " + file.getName());
        setTitle(titulo);
        try {
            int indiceArchivo = tabbedPane.indexOfFile (file);
            if (indiceArchivo != -1 && tabbedPane.getTabCount() >1) {
                tabbedPane.setSelectedIndex(indiceArchivo);
                return;
            }
            byte[] fileBytes = FileUtils.getBytesFromFile(file);
            SignedFile signedFile = new SignedFile(fileBytes, file.getName());
            ArchivoFirmadoPanel archivoFirmadoPanel = new ArchivoFirmadoPanel(signedFile);
            tabbedPane.addTab(file, archivoFirmadoPanel);
            tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
            tabbedPane.setVisible(true);
            pack();
        } catch (Exception ex) {
            mostrarPantallaError();
            logger.error("mostradaPantallaError - " + ex.getMessage(), ex);
        }
    }
    
    private void showSignedFile (SignedFile signedFile) {
        try {
            tabbedPane.setTitleAt(1, "<html>" + signedFile.getName() + "&nbsp;&nbsp;&nbsp;&nbsp;</html>");
            ArchivoFirmadoPanel archivoFirmadoPanel = (ArchivoFirmadoPanel) tabbedPane.getComponentAt(1);
            archivoFirmadoPanel.initFileData(signedFile);  
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }

    private void mostrarPantallaEnvio (boolean visibility) {
        mostrandoPantallaEnvio = visibility;
        progressBarPanel.setVisible(visibility);
        tabbedPane.setVisible(!visibility);
        botonesPanel.setVisible(!visibility);
        pack();
    }

    private void mostrarPantallaError () {
        botonesPanel.setVisible(false);
        tabbedPane.setVisible(false);
        pack();
    }

    public void mostrarEvento (final URL url, final String titulo) {
        mostrarPantallaEnvio(true);
        setVisible(true);
    }
    
    public void guardarMensajeMime () {
        try {
            final JFileChooser chooser = new JFileChooser();
            int returnVal = chooser.showSaveDialog(parentFrame);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                if (file.getName().indexOf(".") == -1) {
                    String fileName = file.getAbsolutePath() + 
                            Contexto.SIGNED_PART_EXTENSION;
                    FileOutputStream fos = new FileOutputStream(new File(fileName));
                    fos.write(mensajeMime.getBytes());
                    fos.close();
                }
            }
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }
    
     private String checkFileSize (File file) {
        logger.debug("checkFileSize");
        String result = null;
        if (file.length() > Contexto.SIGNED_MAX_FILE_SIZE) {
            result = Contexto.INSTANCE.getString("fileSizeExceededMsg", 
                        file.length() , Contexto.SIGNED_MAX_FILE_SIZE_KB);
        }
        return result;
    }
    
    private String checkByteArraySize (byte[] signedFileBytes) {
        String result = null;
        if (signedFileBytes.length > Contexto.SIGNED_MAX_FILE_SIZE) {
            result = Contexto.INSTANCE.getString("fileSizeExceededMsg", 
                        signedFileBytes.length , Contexto.SIGNED_MAX_FILE_SIZE_KB);
        }
        return result;
    }
     
    private class FiltroCMS implements java.io.FileFilter {
        @Override public boolean accept(File file) {
            return (checkFileSize(file) == null);
        }
    }

    public String getFechaFirmaLabelText (Date date) {
        return "<html><b>Fecha de la firma:</b> " + 
                DateUtils.getSpanishFormattedStringFromDate(date) + "</html>";
    }

    public void setVisible(String decompressedBackupBaseDir) {
        logger.debug("setVisible - decompressedBackupBaseDir: " + 
                decompressedBackupBaseDir);
        this.decompressedBackupBaseDir = decompressedBackupBaseDir;
        File metaInfFile = new File(decompressedBackupBaseDir + File.separator + 
                "meta.inf");
        
        
        if(!metaInfFile.exists()) {
            String message = ContextoHerramienta.INSTANCE.getString(
                    "metaInfNotFoundMsg", 
                    metaInfFile.getAbsolutePath());
            logger.error(message);
            MensajeDialog errorDialog = new MensajeDialog(parentFrame, true);
            errorDialog.setMessage(message, "Error");
            return;
        }
        try {
            metaInf = MetaInf.parse(FileUtils.getStringFromFile(metaInfFile));
            InformacionEventoPanel informacionEventoPanel = 
                    new InformacionEventoPanel(metaInf);
            tabbedPane.removeAll();
            tabbedPane.addTab("<html><b>" + informacionEventoPanel.
                    getValorTipoEvento() + "</b>&nbsp;&nbsp;&nbsp;&nbsp;</html>", 
                    informacionEventoPanel);
            if(Tipo.EVENTO_VOTACION == metaInf.getType() ||
                    Tipo.EVENTO_FIRMA == metaInf.getType() ||
                    Tipo.EVENTO_RECLAMACION == metaInf.getType()) {
                validateBackupButton.setVisible(true);
            }
        } catch(Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
        
        
        
        /*try {
            ZipFile backupZip = new ZipFile(zip);
            new File(Contexto.DEFAULTS.APPTEMPDIR + File.separator + 
                    zip.getName()).mkdirs();
            setTitle(zip.getName());
            Enumeration entries = backupZip.entries();
            while(entries.hasMoreElements()) {
                ZipEntry entry = (ZipEntry)entries.nextElement();
                if(entry.isDirectory()) {
                    //archivoDestino.mkdirs();
                    //continue;
                } else {
                    byte[] signedFileBytes = FileUtils.getBytesFromInputStream(
                        backupZip.getInputStream(entry));
                    String msg = checkByteArraySize(signedFileBytes);
                    if(msg == null) {
                        if ("meta.inf".equals(entry.getName())) {
                            byte[] metaInfBytes = FileUtils.getBytesFromInputStream(
                                    backupZip.getInputStream(entry));
                            InformacionEventoPanel informacionEventoPanel = 
                                new InformacionEventoPanel(metaInfBytes);
                            tabbedPane.removeAll();
                            tabbedPane.addTab("<html><b>" + entry.getName() + 
                                    "</b>&nbsp;&nbsp;&nbsp;&nbsp;</html>", 
                                    informacionEventoPanel);
                        } else {
                            SignedFile signedFile = new SignedFile(
                                    signedFileBytes, entry.getName());
                            signedFileList.add(signedFile);
                                        
                            mostrarPantallaEnvio(false);
                        }
                    } else {
                        logger.error("ERROR ZipEntry '" + entry.getName() + "'  -> " + msg);
                    }
                }     
            }
            backupZip.close();
            logger.debug("Numero archivos en lista: " + signedFileList.size());
            selectedFileIndex = 0;
            SignedFile primerArchivo = signedFileList.get(selectedFileIndex++);
            ArchivoFirmadoPanel archivoFirmadoPanel = 
                    new ArchivoFirmadoPanel(primerArchivo);
            archivoFirmadoPanel.setContentFormated(checkBox.isSelected());
            tabbedPane.addTab(primerArchivo.getName(), archivoFirmadoPanel);
            tabbedPane.setSelectedIndex(0);
            tabbedPane.setVisible(true);
            navegacionPanel.setVisible(true);
        } catch (ZipException ex) {/*
            File directorioArchivo = archivo.getParentFile();
            signedFileListCMS = Arrays.asList(directorioArchivo.listFiles(new FiltroCMS()));
            selectedFileIndex = signedFileListCMS.indexOf(archivo);
            if (signedFileListCMS.size() < 2) habilitarBotones(false);
            else habilitarBotones(true);
            contexto = Contexto.EXPLORANDO_DIRECTORIO;
            mostrarArchivo(archivo);
            mostrarPantallaEnvio(false);
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            mostrarPantallaEnvio(false);
        } */  
        setVisible(true);
    }
    
        
    public static void main(String args[]) {
        Contexto.INSTANCE.init(null);
        final VisualizadorDeEventoFirmadoDialog dialog = 
                new VisualizadorDeEventoFirmadoDialog(new javax.swing.JFrame(), true);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    logger.debug("run");
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    dialog.setVisible(".VotingSystem/temp/89afb85b-2fd4-490a-95a1-6434fa0a20e4");
                } catch (Exception ex) {
                    logger.error(ex.getMessage(), ex);
                }
            }
        });
    }

        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anteriorButton;
    private javax.swing.JPanel botonesPanel;
    private javax.swing.JButton cerrarButton;
    private javax.swing.JButton guardarButton;
    private javax.swing.JLabel mensajeLabel;
    private javax.swing.JPanel navegacionPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel progressBarPanel;
    private javax.swing.JButton siguienteButton;
    private org.sistemavotacion.herramientavalidacion.ClosableTabbedPane tabbedPane;
    private javax.swing.JButton validateBackupButton;
    // End of variables declaration//GEN-END:variables
}
