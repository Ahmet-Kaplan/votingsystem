package org.sistemavotacion.herramientavalidacion;

import static org.sistemavotacion.herramientavalidacion.AppletHerramienta.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import org.bouncycastle.tsp.TimeStampRequest;
import org.sistemavotacion.modelo.Respuesta;
import org.sistemavotacion.smime.SMIMEMessageWrapper;
import org.sistemavotacion.util.FileUtils;
import org.sistemavotacion.worker.WorkerListener;
import org.sistemavotacion.worker.TimeStampWorker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
* @author jgzornoza
* Licencia: https://github.com/jgzornoza/HerramientaValidacionCopiasDeSeguridad/blob/master/licencia.txt
*/
public class ArchivoFirmadoPanel extends JPanel {
    
    private static Logger logger = LoggerFactory.getLogger(ArchivoFirmadoPanel.class);
    
    SMIMEMessageWrapper smimeMessageWraper;
    private File file;
 
    
    public ArchivoFirmadoPanel() {
        initComponents();
    }
        
    public ArchivoFirmadoPanel(File file) throws Exception {
        initComponents();
        informacionFirmadaEditorPane.setEditable(false);
        informacionFirmadaEditorPane.setContentType("text/html");
        this.file = file;
        initData();
    }
    
    public void mostrarArchivo (File file) throws Exception {
        this.file = file;
        initData();
    }
    
    public void initData() throws IOException, Exception {    
        byte[] bytes = FileUtils.getBytesFromFile(file);
        ArchivoFirmadoPanel archivoFirmadoPanel = null;
        try {
            smimeMessageWraper = SMIMEMessageWrapper.build(
                    new ByteArrayInputStream(bytes), null);
            if (smimeMessageWraper.isValidSignature()) {
                resultadoFirmaButton.setText("<html><b>" + 
                        getString("signatureOKLabel") + "</b><html>");
                resultadoFirmaButton.setIcon(new ImageIcon(getClass().
                        getResource("/resources/images/signature-ok_16x16.png")));
                

                if(smimeMessageWraper.hasTimeStampToken()) {
                    logger.debug(" --- Tiene sello de tiempo --- ");
                }
                
                
                
            } else {
                resultadoFirmaButton.setText("<html><b>" + 
                        getString("signatureERRORLabel") + "</b><html>");
                resultadoFirmaButton.setIcon(new ImageIcon(getClass().
                        getResource("/resources/images/signature-bad_16x16.png")));
            }
            informacionFirmadaEditorPane.setText(smimeMessageWraper.getSignedContent());
            if (smimeMessageWraper.getFirmantes() != null && 
                    smimeMessageWraper.getFirmantes().size() > 0) {
                if (smimeMessageWraper.getFirmantes().size() == 1) firmantesLabel.setText(
                        "<html>" + getString("documentWithLbl") + " <b>1</b> " + 
                        getString("signerLbl") + "<html>");
                else firmantesLabel.setText(
                        "<html>" + getString("documentWithLbl") + " <b>" 
                        +  smimeMessageWraper.getFirmantes().size() + "</b> "
                        + getString("signersLbl") + "<html>");
            }
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            resultadoFirmaButton.setText("<html><b>" + 
                        getString("signatureOKLabel") + "</b><html>");
            resultadoFirmaButton.setIcon(new ImageIcon(getClass().
                        getResource("/resources/images/signature-bad_16x16.png")));
            informacionFirmadaEditorPane.setText(new String(bytes));
            return;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        datosFirmadosPanel = new javax.swing.JPanel();
        firmantesLabel = new javax.swing.JLabel();
        resultadoFirmaButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        informacionFirmadaEditorPane = new javax.swing.JEditorPane();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/sistemavotacion/herramientavalidacion/Bundle"); // NOI18N
        firmantesLabel.setText(bundle.getString("ArchivoFirmadoPanel.firmantesLabel.text")); // NOI18N

        resultadoFirmaButton.setText(bundle.getString("ArchivoFirmadoPanel.resultadoFirmaButton.text")); // NOI18N
        resultadoFirmaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultadoFirmaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout datosFirmadosPanelLayout = new javax.swing.GroupLayout(datosFirmadosPanel);
        datosFirmadosPanel.setLayout(datosFirmadosPanelLayout);
        datosFirmadosPanelLayout.setHorizontalGroup(
            datosFirmadosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datosFirmadosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(firmantesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resultadoFirmaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        datosFirmadosPanelLayout.setVerticalGroup(
            datosFirmadosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datosFirmadosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datosFirmadosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firmantesLabel)
                    .addComponent(resultadoFirmaButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        informacionFirmadaEditorPane.setBackground(java.awt.Color.white);
        scrollPane.setViewportView(informacionFirmadaEditorPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(datosFirmadosPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(datosFirmadosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resultadoFirmaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultadoFirmaButtonActionPerformed
        try {
            /*JFrame frame = null;
            Component component = SwingUtilities.getRoot(this);
            if(component instanceof JFrame) {
                frame = (JFrame)component;
            }
            while(frame == null) {
                component = component.getParent();
                if(component instanceof JFrame) frame = (JFrame)component;
            }*/
            FirmantesDialog firmantesDialog = new FirmantesDialog(
                    AppletHerramienta.INSTANCIA.getFrame(), true);
            firmantesDialog.mostrarInformacion(smimeMessageWraper.getFirmantes());
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }//GEN-LAST:event_resultadoFirmaButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel datosFirmadosPanel;
    private javax.swing.JLabel firmantesLabel;
    private javax.swing.JEditorPane informacionFirmadaEditorPane;
    private javax.swing.JButton resultadoFirmaButton;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

  public void setInformacionConFormato(boolean conFormato) {
        logger.debug("conFormato: " + conFormato);
        String textoConFormato = null;
        if (!conFormato) {
            try {
                textoConFormato = Formateadora.procesar(smimeMessageWraper.getSignedContent()); 
                informacionFirmadaEditorPane.setText(textoConFormato);
            } catch(Exception ex) {
                logger.error(ex.getMessage(), ex);
                return;
            }
        } else informacionFirmadaEditorPane.setText(smimeMessageWraper.getSignedContent());        
    }

    /**
     * @return the file
     */
    public File getFile() {
        return file;
    }

    /**
     * @param file the file to set
     */
    public void setFile(File file) {
        this.file = file;
    }


}
