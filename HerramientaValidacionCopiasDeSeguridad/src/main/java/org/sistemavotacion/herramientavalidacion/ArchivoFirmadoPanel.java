package org.sistemavotacion.herramientavalidacion;

import org.sistemavotacion.herramientavalidacion.util.Formateadora;
import java.awt.Desktop;
import java.awt.Frame;
import static org.sistemavotacion.herramientavalidacion.AppletHerramienta.*;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import org.sistemavotacion.herramientavalidacion.modelo.SignedFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
* @author jgzornoza
* Licencia: https://github.com/jgzornoza/SistemaVotacion/wiki/Licencia
*/
public class ArchivoFirmadoPanel extends JPanel {
    
    private static Logger logger = LoggerFactory.getLogger(ArchivoFirmadoPanel.class);
    
    private SignedFile signedFile;
    
    public ArchivoFirmadoPanel() {
        initComponents();
    }
    
    public ArchivoFirmadoPanel(SignedFile signedFile) throws Exception {
        initComponents();
        informacionFirmadaEditorPane.setEditable(false);
        informacionFirmadaEditorPane.setContentType("text/html");       
        initFileData(signedFile);
    }

    
    public void initFileData(SignedFile signedFile) throws IOException, Exception {  
        this.signedFile = signedFile;
        if(signedFile == null) {
            logger.debug("initFileData - signedFile null");
            openPDFButton.setVisible(false);
            datosFirmadosPanel.setVisible(false);
            scrollPane.setVisible(false);
        } else {
            boolean isPDF = signedFile.isPDF();
            openPDFButton.setVisible(isPDF);
            datosFirmadosPanel.setVisible(!isPDF);
            scrollPane.setVisible(!isPDF);
        }
        if(signedFile == null) return;
        try {
            if (signedFile.isValidSignature()) {
                resultadoFirmaButton.setText("<html><b>" + 
                    getString("signatureOKLabel") + "</b><html>");
            resultadoFirmaButton.setIcon(new ImageIcon(getClass().
                    getResource("/resources/images/signature-ok_16x16.png")));

            } else {
                resultadoFirmaButton.setText("<html><b>" + 
                        getString("signatureERRORLabel") + "</b><html>");
                resultadoFirmaButton.setIcon(new ImageIcon(getClass().
                        getResource("/resources/images/signature-bad_16x16.png")));
            }
            if(!signedFile.isPDF()) {
                JSONObject contentJSON = (JSONObject) JSONSerializer.toJSON(
                    signedFile.getSMIMEMessageWraper().getSignedContent());
                informacionFirmadaEditorPane.setText(contentJSON.toString(5));
            }
           
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            resultadoFirmaButton.setText("<html><b>" + 
                        getString("signatureERRORLabel") + "</b><html>");
            resultadoFirmaButton.setIcon(new ImageIcon(getClass().
                        getResource("/resources/images/signature-bad_16x16.png")));
            resultadoFirmaButton.setEnabled(false);
            informacionFirmadaEditorPane.setText(ex.getMessage());
            return;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        datosFirmadosPanel = new javax.swing.JPanel();
        firmantesLabel = new javax.swing.JLabel();
        resultadoFirmaButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        informacionFirmadaEditorPane = new javax.swing.JEditorPane();
        openPDFButton = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/sistemavotacion/herramientavalidacion/Bundle"); // NOI18N
        firmantesLabel.setText(bundle.getString("ArchivoFirmadoPanel.firmantesLabel.text")); // NOI18N

        resultadoFirmaButton.setText(bundle.getString("ArchivoFirmadoPanel.resultadoFirmaButton.text")); // NOI18N
        resultadoFirmaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultadoFirmaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout datosFirmadosPanelLayout = new javax.swing.GroupLayout(datosFirmadosPanel);
        datosFirmadosPanel.setLayout(datosFirmadosPanelLayout);
        datosFirmadosPanelLayout.setHorizontalGroup(
            datosFirmadosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datosFirmadosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(firmantesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resultadoFirmaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        datosFirmadosPanelLayout.setVerticalGroup(
            datosFirmadosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datosFirmadosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datosFirmadosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firmantesLabel)
                    .addComponent(resultadoFirmaButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        informacionFirmadaEditorPane.setBackground(java.awt.Color.white);
        scrollPane.setViewportView(informacionFirmadaEditorPane);

        openPDFButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/pdf_16x16.png"))); // NOI18N
        openPDFButton.setText(bundle.getString("ArchivoFirmadoPanel.openPDFButton.text")); // NOI18N
        openPDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPDFButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(datosFirmadosPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scrollPane)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(openPDFButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(datosFirmadosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openPDFButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resultadoFirmaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultadoFirmaButtonActionPerformed
        try {
            /*JFrame frame = null;
            Component component = SwingUtilities.getRoot(this);
            if(component instanceof JFrame) {
                frame = (JFrame)component;
            }
            while(frame == null) {
                component = component.getParent();
                if(component instanceof JFrame) frame = (JFrame)component;
            }*/
            Frame frame = Frame.getFrames()[0];
            FirmantesDialog firmantesDialog = new FirmantesDialog(frame, true);
            firmantesDialog.mostrarInformacion(signedFile.
                    getSMIMEMessageWraper().getFirmantes());
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }//GEN-LAST:event_resultadoFirmaButtonActionPerformed

    private void openPDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPDFButtonActionPerformed
        if (!Desktop.isDesktopSupported()) {
            logger.debug("No hay soporte de escritorio");
        }
        Desktop desktop = Desktop.getDesktop();
        if (!desktop.isSupported(Desktop.Action.BROWSE)) {
            logger.debug("No se puede editar archivos");
        }
        try {
            logger.info(" openPDFButtonActionPerformed - signedFile: " + 
                    signedFile.getName());
            desktop.open(signedFile.getFile());
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }//GEN-LAST:event_openPDFButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel datosFirmadosPanel;
    private javax.swing.JLabel firmantesLabel;
    private javax.swing.JEditorPane informacionFirmadaEditorPane;
    private javax.swing.JButton openPDFButton;
    private javax.swing.JButton resultadoFirmaButton;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

  public void setContentFormated(boolean conFormato) {
        logger.debug("conFormato: " + conFormato);
        if(signedFile.isPDF()) return;
        if (conFormato) {
            try {
                String formattedText = Formateadora.procesar(signedFile.
                        getSMIMEMessageWraper().getSignedContent()); 
                informacionFirmadaEditorPane.setText(formattedText);
            } catch(Exception ex) {
                logger.error(ex.getMessage(), ex);
            }
        } else informacionFirmadaEditorPane.setText(signedFile.
                        getSMIMEMessageWraper().getSignedContent());        
    }

    /**
     * @return the signedFile
     */
    public SignedFile getSignedFile() {
        return signedFile;
    }

    /**
     * @param signedFile the signedFile to set
     */
    public void setSignedFile(SignedFile signedFile) {
        this.signedFile = signedFile;
    }


}
