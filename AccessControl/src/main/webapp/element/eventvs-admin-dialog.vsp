<%@ page contentType="text/html; charset=UTF-8" %>

<link href="${resourceURL}/paper-icon-button/paper-icon-button.html" rel="import"/>
<link href="${resourceURL}/vs-html-echo/vs-html-echo.html" rel="import"/>
<link href="${resourceURL}/paper-dialog/paper-dialog.html" rel="import"/>


<dom-module name="eventvs-admin-dialog" attributes="opened">
    <template>
        <paper-dialog flex vertical id="xDialog" layered backdrop opened="{{opened}}" layered="true" sizingTarget="{{$.container}}">
            <link href="${contextURL}/resources/css/votingSystem.css" media="all" rel="stylesheet" />
            <link href="${resourceURL}/font-awesome/css/font-awesome.min.css" media="all" rel="stylesheet" />
            <!-- place all overlay styles inside the overlay target -->
            <style>
                .messageToUser {
                    font-weight: bold;
                    margin:10px auto 10px auto;
                    background: #f9f9f9;
                    padding:10px 20px 10px 20px;
                }
            </style>
            <div id="container" layout vertical style="overflow-y: auto; width:450px; padding:10px;">
                <div class="layout horizontal center center-justified">
                    <div class="flex" style="font-size: 1.5em; margin:0px 0px 0px 30px;font-weight: bold; color:#6c0404;">
                        <div style="text-align: center;">${msg.cancelEventCaption}</div>
                    </div>
                    <div style="position: absolute; top: 0px; right: 0px;">
                        <paper-icon-button on-click="close" icon="close" style="fill:#6c0404; color:#6c0404;"></paper-icon-button>
                    </div>
                </div>

                <div hidden="{{!messageToUser}}" layout horizontal center center-justified style="margin:0px 10px 0px 0px;">
                    <div class="messageToUser">
                        {{messageToUser}}
                    </div>
                </div>

                <div>
                    <p style="text-align: center;">${msg.adminDocumenInfoMsg}</p>
                    ${msg.documentStateSelectionMsg}:<br/>
                    <div style="font-size: 1.1em; margin:10px 0 0 10px;">
                        <div style="margin:10px 0 0 0">
                            <label>
                                <input type="radio" name="optionsRadios" id="selectDeleteDocument" value="">
                                ${msg.selectDeleteDocumentMsg}
                            </label>
                        </div>
                        <div style="margin:10px 0 0 0">
                            <label>
                                <input type="radio" name="optionsRadios" id="selectCloseDocument" value="">
                                ${msg.selectCloseDocumentMsg}
                            </label>
                        </div>
                    </div>
                </div>
                <div layout horizontal style="margin:10px 20px 0px 0px; margin:10px;">
                    <div class="flex"></div>
                    <button on-click="submitForm" style="margin: 0px 0px 0px 5px; font-size: 1.1em;">
                        <i class="fa fa-check"></i> ${msg.acceptLbl}
                    </button>
                </div>
            </div>
        </paper-dialog>
    </template>
    <script>
        Polymer({
            is:'eventvs-admin-dialog',
            publish: {
                eventvs: {value: {}}
            },
            ready: function() {
                this.isConfirmMessage = this.isConfirmMessage || false
            },
            onCoreOverlayOpen:function(e) {
                this.opened = this.$.xDialog.opened
            },
            openedChanged:function() {
                this.$.xDialog.opened = this.opened
                if(this.opened == false) this.close()
            },
            submitForm: function() {
                console.log("submitForm")
                this.messageToUser = null
                if(!this.$.selectDeleteDocument.checked && !this.$.selectCloseDocument.checked) {
                    this.messageToUser = "${msg.selectDocumentStateERRORMsg}"
                } else {
                    var state
                    var messageSubject
                    if(this.$.selectDeleteDocument.checked) {
                        state = EventVS.State.DELETED_FROM_SYSTEM
                        messageSubject = '${msg.deleteEventVSMsgSubject}'
                    } else if(this.$.selectCloseDocument.checked) {
                        state = EventVS.State.CANCELED
                        messageSubject = '${msg.cancelEventVSMsgSubject}'
                    }
                    var operationVS = new OperationVS(Operation.EVENT_CANCELLATION)
                    operationVS.serviceURL= "${restURL}/eventVS/cancel"
                    var signedContent = {operation:Operation.EVENT_CANCELLATION,
                        accessControlURL:"${contextURL}", eventId:Number(this.eventvs.id), state:state}
                    operationVS.jsonStr = JSON.stringify(signedContent)
                    operationVS.signedMessageSubject = messageSubject
                    operationVS.setCallback(function(appMessage) {
                        console.log("eventvs-admin-dialog callback - message: " + appMessage);
                        var appMessageJSON = toJSON(appMessage)
                        var caption
                        var msg
                        if(ResponseVS.SC_OK == appMessageJSON.statusCode) {
                            caption = "${msg.operationOKCaption}"
                            msg = "${msg.documentCancellationOKMsg}".format(this.eventvs.subject);
                            window.location.href = "${restURL}/eventVSElection/id/" + votingEvent.id
                        } else {
                            caption = "${msg.operationERRORCaption}"
                            msg = appMessageJSON.message
                        }
                        showMessageVS(msg, caption)
                    }.bind(this))
                    VotingSystemClient.setMessage(operationVS);
                }
            },
            close: function() {
                this.opened = false
                this.messageToUser = null
            }
        });
    </script>
</dom-module>
