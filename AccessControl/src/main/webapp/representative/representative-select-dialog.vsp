<%@ page contentType="text/html; charset=UTF-8" %>

<link href="${resourceURL}/core-icon-button/core-icon-button.html" rel="import"/>
<link href="${resourceURL}/vs-html-echo/vs-html-echo.html" rel="import"/>
<link href="${resourceURL}/paper-dialog/paper-dialog.html" rel="import"/>
<link href="${resourceURL}/paper-dialog/paper-dialog-transition.html" rel="import"/>


<polymer-element name="representative-select-dialog">
    <template>
        <paper-dialog id="xDialog" class="dialog" autoCloseDisabled layered backdrop on-core-overlay-open="{{onCoreOverlayOpen}}">
            <link href="${contextURL}/resources/css/votingSystem.css" media="all" rel="stylesheet" />
            <link href="${resourceURL}/font-awesome/css/font-awesome.min.css" media="all" rel="stylesheet" />
            <style no-shim>
            :dialog {
                box-sizing: border-box;
                -moz-box-sizing: border-box;
                font-family: Arial, Helvetica, sans-serif;
                font-size: 1.2em;
                -webkit-user-select: none;
                -moz-user-select: none;
                overflow: auto;
                background: white;
                outline: 1px solid rgba(0,0,0,0.2);
                box-shadow: 0 4px 16px rgba(0,0,0,0.2);
                width: 800px;
                color: #888;
            }
            </style>
            <div id="container" style="overflow: auto;">
                <div layout horizontal center center-justified>
                    <div flex style="font-size: 1.5em; margin:0px auto;font-weight: bold; color:#6c0404;">
                        <div style="text-align: center;">${msg.saveAsRepresentativeLbl}</div>
                    </div>
                    <div style="position: absolute; top: 0px; right: 0px;">
                        <core-icon-button on-click="{{close}}" icon="close" style="fill:#6c0404; color:#6c0404;"></core-icon-button>
                    </div>
                </div>

                <div hidden?="{{step !== 'main'}}">
                    <p>${msg.delegationIntroLbl}</p>

                    <div style="font-size:1.2em;font-weight: bold;">${msg.anonymousDelegationLbl}</div>
                    <div>${msg.anonymousDelegationMsg}</div>
                    <div style="margin: 0 0 0 40px;">
                        <div id="moreDetailsMsgDiv" class="linkVS" on-click="{{toggleDetails}}">
                            <template if="{{showingDetails}}">
                                ${msg.hideDetailsMsg}
                            </template>
                            <template if="{{!showingDetails}}">
                                ${msg.showAnoymousDelegationDetailsMsg}
                            </template>
                        </div>
                        <template if="{{showingDetails}}">
                            <div>${msg.anonymousDelegationMoreMsg}</div>
                        </template>
                    </div>

                    <div style="margin:20px 0 0 0;font-size:1.2em;font-weight: bold;">${msg.publicDelegationLbl}</div>
                    <div>${msg.publicDelegationMsg}</div>

                    <div style="margin:20px 0 0 0;">${msg.selectRepresentationCheckboxMsg}:</div>
                    <div>
                        <div style="margin:0 0 0 40px;">
                            <input type="radio" name="delegationType" id="anonymousDelegationCheckbox" on-click="{{setDelegationType}}"/>
                            <label>${msg.anonymousDelegationCheckboxLbl}</label>
                        </div>
                        <div style="margin:0 0 0 40px;">
                            <input type="radio" name="delegationType" id="publicDelegationCheckbox" checked="checked" on-click="{{setDelegationType}}"/>
                            <label>${msg.publicDelegationCheckboxLbl}</label>
                        </div>
                    </div>
                </div>
                <div hidden?="{{step !== 'confirm'}}">
                    <div style="margin: 10px 0 10px 10px;">
                        <vs-html-echo id="delegationMsg"></vs-html-echo>
                    </div>
                    <template if="{{isAnonymousDelegation == true}}">
                        <div style="margin:25px 0 25px 0;">
                            <vs-html-echo html="{{anonymousDelegationMsg}}"></vs-html-echo>
                        </div>
                    </template>
                </div>
                <div hidden?="{{isAnonymousDelegation == false || step !== 'main'}}" vertical layout center center-justified
                     style="margin:10px 0;">
                    <label>${msg.numWeeksAnonymousDelegationMsg}</label>
                    <input type="number" id="numWeeksAnonymousDelegation" min="1" value="" max="52" required
                           style="width:120px;margin:10px 20px 0px 7px;" class="form-control"
                           title="${msg.numWeeksAnonymousDelegationMsg}">
                </div>
                <div hidden?="{{step !== 'main'}}">
                    <div layout horizontal style="margin:0px 20px 0px 0px;">
                        <div flex></div>
                        <div style="margin:10px 0px 10px 0px;">
                            <paper-button raised on-click="{{showConfirm}}" style="margin: 0px 0px 0px 5px;">
                                <i class="fa fa-check"></i> ${msg.acceptLbl}
                            </paper-button>
                        </div>
                    </div>
                </div>

                <div hidden?="{{step !== 'confirm'}}">
                    <div layout horizontal style="margin:0px 20px 0px 0px;  font-size:1.2em;">
                        <div flex></div>
                        <div style="margin:10px 20px 10px 0px;">
                            <paper-button raised on-click="{{cancel}}" style="margin: 0px 0px 0px 5px;">
                                <i class="fa fa-times"></i> ${msg.cancelLbl}
                            </paper-button>
                        </div>
                        <div style="margin:10px 0px 10px 0px;">
                            <paper-button raised on-click="{{submit}}" style="margin: 0px 0px 0px 5px;">
                                <i class="fa fa-check"></i> ${msg.acceptLbl}
                            </paper-button>
                        </div>
                    </div>
                </div>

                <div hidden="{{step !== 'anonymousDelegationResponse'}}">
                    <p style="text-align: center; font-size: 1.2em;">
                        {{anonymousDelegationResponseMsg}}
                    </p>
                    <p style="text-align: center; font-size: 1.2em;">
                        ${msg.anonymousDelegationReceiptMsg}
                    </p>
                </div>
            </div>
        </paper-dialog>
    </template>
    <script>
        Polymer('representative-select-dialog', {
            step:'main',
            showingDetails:false,
            isAnonymousDelegation:false,
            anonymousDelegationMsg:null,
            representative:null,
            anonymousLbl:"${msg.anonymousLbl}",
            hashCertVSBase64:null,
            anonymousDelegationResponseMsg:null,
            representativeFullName:null,
            publicLbl:"${msg.publicLbl}",

            ready: function() {
                this.isConfirmMessage = this.isConfirmMessage || false
                console.log(this.tagName + " - ready")
            },
            onCoreOverlayOpen:function(e) { },
            toggleDetails:function(e) {
                this.showingDetails = !this.showingDetails
            },
            show: function(representative) {
                this.representative = representative
                this.$.numWeeksAnonymousDelegation.value = ""
                this.step = 'main'
                this.isAnonymousDelegation = false
                this.$.publicDelegationCheckbox.checked = true
                this.representativeFullName = this.representative.firstName + " " + this.representative.lastName
                this.$.xDialog.opened = true
                console.log(this.tagName + " - step: " + this.step)
            },
            submit: function() {
                console.log("submit")
                var representativeOperation
                if(!this.$.anonymousDelegationCheckbox.checked && !this.$.publicDelegationCheckbox.checked) {
                    showMessageVS("${msg.selectRepresentationCheckboxMsg}", "${msg.errorLbl}")
                } else {
                    if(this.isAnonymousDelegation) {
                        representativeOperation = Operation.ANONYMOUS_REPRESENTATIVE_SELECTION
                        if(!this.$.numWeeksAnonymousDelegation.validity.valid) {
                            this.messageToUser = '${msg.numberFieldLbl}'
                            return
                        }
                    } else {
                        representativeOperation = Operation.REPRESENTATIVE_SELECTION
                    }
                    var operationVS = new OperationVS(representativeOperation)
                    operationVS.jsonStr = JSON.stringify({operation:representativeOperation, representative:this.representative,
                        weeksOperationActive:this.$.numWeeksAnonymousDelegation.value})
                    operationVS.serviceURL = "${restURL}/representative/delegation"
                    operationVS.signedMessageSubject = '${msg.representativeDelegationMsgSubject}'
                    operationVS.setCallback(function(appMessage) {
                        console.log("selectRepresentativeCallback - message: " + appMessage);
                        var appMessageJSON = toJSON(appMessage)
                        var caption = '${msg.operationERRORCaption}'
                        var msg = appMessageJSON.message
                        if(ResponseVS.SC_OK == appMessageJSON.statusCode) {
                            if(this.isAnonymousDelegation) {
                                this.step = 'anonymousDelegationResponse'
                                this.hashCertVSBase64 = appMessageJSON.message
                                this.anonymousDelegationResponseMsg = "${msg.selectedRepresentativeMsg}".format(this.representativeFullName)
                                return
                            } else {
                                caption = "${msg.operationOKCaption}"
                                msg = "${msg.selectedRepresentativeMsg}".format(this.representativeFullName)
                                this.close()
                            }
                        } else if (ResponseVS.SC_ERROR_REQUEST_REPEATED == appMessageJSON.statusCode) {
                            caption = "${msg.anonymousDelegationActiveErrorCaption}"
                            msg = appMessageJSON.message + "<br/>" +
                                    "${msg.downloadReceiptMsg}".format(appMessageJSON.URL)
                        }
                        showMessageVS(msg, caption)
                    }.bind(this))
                    VotingSystemClient.setMessage(operationVS);
                }
            },

            setDelegationType:function() {
                if(this.$.anonymousDelegationCheckbox.checked) {
                    this.isAnonymousDelegation = true
                } else this.isAnonymousDelegation = false
                console.log(this.tagName + " - setDelegationType - isAnonymousDelegation: " + this.isAnonymousDelegation)
            },
            close: function() {
                this.$.xDialog.opened = false
            },
            showConfirm: function() {
                this.messageToUser = null
                var msgTemplate = "${msg.selectRepresentativeConfirmMsg}";
                if(this.isAnonymousDelegation) {
                    if(!this.$.numWeeksAnonymousDelegation.validity.valid) {
                        showMessageVS('${msg.numWeeksAnonymousDelegationMsg}', '${msg.errorLbl}')
                        return
                    }
                    var weeksMsgTemplate = "${msg.numWeeksResultAnonymousDelegationMsg}";
                    this.$.delegationMsg.html = msgTemplate.format(this.anonymousLbl, this.representative.name)
                    this.anonymousDelegationMsg = weeksMsgTemplate.format(this.anonymousLbl, this.$.numWeeksAnonymousDelegation.value)
                } else this.$.delegationMsg.html = msgTemplate.format(this.publicLbl, this.representative.name)
                this.step = 'confirm'
            },
            cancel: function() {
                if(this.step === 'main') {
                    this.close()
                }else if(this.step === 'confirm') {
                    this.step = 'main'
                }
            }
        });
    </script>
</polymer-element>
