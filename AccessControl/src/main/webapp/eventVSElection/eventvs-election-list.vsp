<%@ page contentType="text/html; charset=UTF-8" %>

<link href="${config.resourceURL}/core-ajax/core-ajax.html" rel="import"/>
<link href="${config.resourceURL}/core-animated-pages/core-animated-pages.html" rel="import"/>
<link href="${config.resourceURL}/vs-html-echo/vs-html-echo.html" rel="import"/>
<link href="${config.webURL}/eventVSElection/eventvs-election.vsp" rel="import"/>
<link href="${config.resourceURL}/vs-pager/vs-pager.html" rel="import"/>

<polymer-element name="eventvs-election-list" attributes="url eventvstype eventVSState">
    <template>
        <link href="${config.contextURL}/css/votingSystem.css" media="all" rel="stylesheet" />
        <link href="${config.resourceURL}/font-awesome/css/font-awesome.min.css" media="all" rel="stylesheet" />
        <style no-shim>
            .card { position: relative; display: inline-block; width: 300px; vertical-align: top;
                box-shadow: 0 5px 5px 0 rgba(0, 0, 0, 0.24); margin: 10px;
            }
        </style>
        <vs-innerpage-signal id="innerpageSignal" caption="${msg.electionSystemLbl}"></vs-innerpage-signal>
        <core-ajax id="ajax" url="{{url}}" response="{{eventsVSMap}}" handleAs="json"
                   contentType="application/json" on-core-complete="{{ajaxComplete}}"></core-ajax>
        <core-signals on-core-signal-eventvs-election-closed="{{closeEventVSDetails}}"></core-signals>
        <core-animated-pages id="pages" flex selected="{{page}}" on-core-animated-pages-transition-end="{{transitionend}}"
                             transitions="cross-fade-all" style="display:{{loading?'none':'block'}}">
            <section id="page1">
                <div cross-fade>
                    <div layout horizontal center center-justified>
                        <template if="{{(eventvstype == 'election')}}">
                            <select id="eventVSStateSelect" style="margin:10px auto 0px auto;color:black; width: 300px;"
                                    on-change="{{eventVSStateSelect}}" class="form-control">
                                <option value="ACTIVE" style="color:#388746;"> - ${msg.selectOpenPollsLbl} - </option>
                                <option value="PENDING" style="color:#fba131;"> - ${msg.selectPendingPollsLbl} - </option>
                                <option value="TERMINATED" style="color:#cc1606;"> - ${msg.selectClosedPollsLbl} - </option>
                            </select>
                        </template>
                        <template if="{{eventvstype == 'claim'}}">
                            <select id="eventsStateSelect" style="margin:0px auto 0px auto;color:black; width: 300px;" class="form-control">
                                <option value="ACTIVE" style="color:#388746;"> - ${msg.selectOpenClaimsLbl} - </option>
                                <option value="PENDING" style="color:#fba131;"> - ${msg.selectPendingClaimsLbl} - </option>
                                <option value="TERMINATED" style="color:#cc1606;"> - ${msg.selectClosedClaimsLbl} - </option>
                            </select>
                        </template>
                    </div>
                    <div layout flex horizontal wrap around-justified>
                        <template repeat="{{eventvs in eventsVSMap.eventVS}}">
                            <div on-tap="{{showEventVSDetails}}" class='card eventDiv linkvs {{ eventvs.state | getEventVSClass }}'>
                                <div  eventvsId-data="{{eventvs.id}}" class='eventSubjectDiv'>
                                    <p style='margin:0px 0px 0px 0px;text-align:center;'>{{eventvs.subject | getSubject}}</p></div>
                                <div class='eventBodyDiv'>
                                    <div class='eventDateBeginDiv'>
                                        <div class='eventDateBeginLblDiv'>${msg.electionDateLbl}:</div>
                                        <div class='eventDateBeginValueDiv'>{{eventvs.dateBeginStr}}</div>
                                    </div>
                                    <div class='eventAuthorDiv'>
                                        <div class='eventAuthorLblDiv'>${msg.publishedByLbl}:</div>
                                        <div class='eventAuthorValueDiv'>{{eventvs.userVS}}</div>
                                    </div>
                                    <div class='cancelMessage' style="display: {{(eventvs.state == 'CANCELED')?'block':'none'}}">
                                        ${msg.eventCancelledLbl}</div>
                                </div>
                                <div class='eventDivFooter'>
                                    <div class='eventRemainingDiv'>{{eventvs.dateFinish | getElapsedTime}}</div>
                                    <div class='eventStateDiv'>{{eventvs.state | getMessage}}</div>
                                </div>
                            </div>
                        </template>
                    </div>
                    <vs-pager id="vspager" on-pager-change="{{pagerChange}}" max="${params.max}" style="margin: 0 0 100px 0;"
                              next="${msg.nextLbl}" previous="${msg.previousLbl}"
                              first="${msg.firstLbl}" last="${msg.lastLbl}"
                              offset="{{eventsVSMap.offset}}" total="{{eventsVSMap.totalCount}}"></vs-pager>
                </div>
            </section>

            <section id="page2">
                <div cross-fade>
                    <eventvs-election id="eventvsDetails" page="{{subpage}}" subpage vertical layout eventvs="{{eventvs}}"></eventvs-election>
                </div>
            </section>
        </core-animated-pages>

    </template>
    <script>
        Polymer('eventvs-election-list', {
            publish: {
                eventsVSMap: {value: {}}
            },
            ready:function(e) {
                console.log(this.tagName + " - ready")
                this.loading = true
                this.page = 0;
                this.subpage = 0;
                if(this.eventVSState) this.$.eventVSStateSelect.value = this.eventVSState
            },
            eventsVSMapChanged:function() {
                this.loading = false
            },
            closeEventVSDetails:function(e, detail, sender) {
                console.log(this.tagName + " - closeEventVSDetails")
                this.$.innerpageSignal.fireSignal()
                this.page = 0;
            },
            pagerChange:function(e) {
                var optionSelected = this.$.eventVSStateSelect.value
                console.log("eventVSStateSelect: " + optionSelected)
                this.$.vspager.style.display = 'none'
                targetURL = "${config.webURL}/eventVSElection?menu=" + menuType + "&eventVSState=" +
                        optionSelected + "&max=" + e.detail.max + "&offset=" + e.detail.offset
                console.log(this.tagName + " - pagerChange - targetURL: " + targetURL)
                history.pushState(null, null, targetURL);
                this.$.ajax.url = targetURL
                this.$.ajax.go()
            },
            showEventVSDetails :  function(e) {
                console.log(this.tagName + " - showEventVSDetails")
                this.$.eventvsDetails.fireSignal()
                this.$.eventvsDetails.eventvs = e.target.templateInstance.model.eventvs;
                this.page = 1;
            },
            getRepresentativeName:function(groupvs) {
                return groupvs.representative.firstName + " " + groupvs.representative.lastName
            },
            getSubject:function(eventSubject) {
                return eventSubject.substring(0,50) + ((eventSubject.length > 50)? "...":"");
            },
            getMessage : function (eventVSState) {
                switch (eventVSState) {
                    case EventVS.State.ACTIVE: return "${msg.openLbl}"
                    case EventVS.State.PENDING: return "${msg.pendingLbl}"
                    case EventVS.State.TERMINATED: return "${msg.closedLbl}"
                    case EventVS.State.CANCELED: return "${msg.cancelledLbl}"
                }
            },
            getElapsedTime: function(dateStr) {
                return dateStr.getElapsedTime() + " ${msg.toCloseLbl}"
            },
            getEventVSClass:function(eventVSState) {
                switch (eventVSState) {
                    case EventVS.State.ACTIVE: return "eventVSActive"
                    case EventVS.State.PENDING: return "eventVSPending"
                    case EventVS.State.TERMINATED: return "eventVSFinished"
                    case EventVS.State.CANCELED: return "eventVSFinished"
                }
            },
            eventVSStateSelect: function() {
                var optionSelected = this.$.eventVSStateSelect.value
                console.log("eventVSStateSelect: " + optionSelected)
                targetURL = "${config.webURL}/eventVSElection?menu=" + menuType + "&eventVSState=" + optionSelected
                history.pushState(null, null, targetURL);
                this.$.ajax.url = targetURL
                this.$.ajax.go()
            },
            ajaxComplete:function() {
                this.loading = false
            }
        });
    </script>
</polymer-element>