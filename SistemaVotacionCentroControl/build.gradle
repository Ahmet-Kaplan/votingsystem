task copyApplet(dependsOn: [':SistemaVotacionApplet:signJar', ':HerramientaValidacionCopiasDeSeguridad:signJar',
	':SistemaVotacionAndroid:zipalign']) {
	
	doLast {
		File appletFirma = new File("$projectDir/web-app/applet/AppletFirma.jar")
		if(appletFirma.exists()) appletFirma.delete()
		appletFirma << rootProject.appletFirma?.bytes
		
		File appletHerramienta = new File("$projectDir/web-app/applet/HerramientaValidacion.jar")
		if(appletHerramienta.exists()) appletHerramienta.delete()
		appletHerramienta << rootProject.herramientaValidacion?.bytes
		
		File appAndroid = new File("$projectDir/web-app/android/SistemaVotacion.apk")
		if(appAndroid.exists()) appAndroid.delete()
		appAndroid << rootProject.aplicacionAndroid?.bytes
	}
}

task stopApp << {
	file("${projectDir}/.kill-run-app").createNewFile()
}

task runApp << { task ->
	ProcessBuilder pb = new ProcessBuilder("grails", "run-app");
	pb.directory(projectDir);
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('runApp failed')
	}
}

task war(dependsOn:'copyApplet') << {task ->
	ProcessBuilder pb = new ProcessBuilder("grails", "war");
	pb.directory(projectDir);
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('war failed')
	}
	announce.announce("$project.name - Done creating WAR", "local")
}

defaultTasks 'war'
