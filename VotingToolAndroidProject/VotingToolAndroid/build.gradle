version = '0.6.0'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
    }
}

apply plugin: 'announce'
apply plugin: 'com.android.application'


repositories {
    mavenLocal()
    mavenCentral()
}

android {
    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
            storeFile file("$rootProject.projectDir/$rootProject.testUserKeyStorePath",)
            storePassword rootProject.keyStorePassword
            keyAlias rootProject.signKeyAlias
            keyPassword rootProject.keyStorePassword
        }
    }

    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 21
    }

    buildTypes {
        debug { }
        release {
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk') && !outputFile.name.contains("debug")) {
                copy {
                    from output.outputFile
                    into projectDir
                    rename (outputFile.name, "${signedAndroidAppName}.apk")
                }
                println "copied apk into ${projectDir}"
            }
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:21.0.+'
    compile 'com.android.support:cardview-v7:21.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.+'
    compile 'com.google.zxing:android-core:3.1.0'
    compile 'com.google.zxing:core:3.1.0'

    compile 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.9'

    compile project(':libraries:bc')
    compile project(':libraries:votingsystem')
}

preBuild.dependsOn 'setAndroidEnv'

task release(dependsOn:'build') <<  {
    announce.announce("Android Voting Tool '${signedAndroidAppName}.apk' signed and put into context", "local")
}

task setAndroidEnv() << {
	//env.each{println it} 
	String androidHome= System.getenv()['ANDROID_HOME']
	if(!androidHome) throw new RuntimeException('Android SDK not Found you must install -> http://developer.android.com/sdk/index.html')
}
