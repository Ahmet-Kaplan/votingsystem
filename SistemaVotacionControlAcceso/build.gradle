task copyApps(dependsOn: [':SistemaVotacionApplet:signJar', 
	':HerramientaValidacionCopiasDeSeguridad:signJar', ':SistemaVotacionAndroid:zipalign']) {
	
	doLast {
		File appletDir = new File("$projectDir/web-app/applet/");
		appletDir.mkdirs();
		File androidDir = new File("$projectDir/web-app/android/");
		androidDir.mkdirs();
		
		File appletFirma = new File("$projectDir/web-app/applet/AppletFirma.jar")
		if(appletFirma.exists()) appletFirma.delete()
		appletFirma << rootProject.appletFirma?.bytes
		
		File appletHerramienta = new File("$projectDir/web-app/applet/HerramientaValidacion.jar")
		if(appletHerramienta.exists()) appletHerramienta.delete()
		appletHerramienta << rootProject.herramientaValidacion?.bytes
		
		File appAndroid = new File("$projectDir/web-app/android/SistemaVotacion.apk")
		if(appAndroid.exists()) appAndroid.delete()
		appAndroid << rootProject.aplicacionAndroid?.bytes
	}
}

task copyAppletDeps(type: Copy, dependsOn: ['copyApps']) {task ->
	File depsDir = new File("${projectDir}/web-app/applet/lib");
	depsDir.mkdirs();
	into depsDir.path
	from "${rootProject.projectDir}/SistemaVotacionApplet/build/appletdeps"
}

task stopApp << {
	file("${projectDir}/.kill-run-app").createNewFile()
}


task runApp << { task ->
	ProcessBuilder pb = new ProcessBuilder("grails", "run-app");
	pb.directory(projectDir);
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('runApp failed')
	}
}

ext {
	grailsRestDocPluginVersion = "0.4"
	gwtVisualizationVersion="1.1.2"
}

task installGrailsRestDocPlugin << { task ->
	ProcessBuilder pb;
	Process proc;
	println "GrailsRestDocPlugin Version: ${grailsRestDocPluginVersion}"
	String pluginFilePath = "../GrailsRestDocPlugin-${grailsRestDocPluginVersion}.zip"
	String pluginBaseDir = "../GrailsRestDocPlugin-${grailsRestDocPluginVersion}"
	if(!file("${pluginBaseDir}/grails-rest-doc-plugin-${grailsRestDocPluginVersion}.zip").exists()) {
		if(!file(pluginBaseDir).exists()) {
			String fileURL = "https://github.com/jgzornoza/GrailsRestDocPlugin/" + 
				"archive/v${grailsRestDocPluginVersion}.zip"
			println "--- downloading ${fileURL}"
			ant.get(src:fileURL, dest:pluginFilePath)
			ant.unzip(src:pluginFilePath, dest:"..")
		}
		pb = new ProcessBuilder("grails", "package-plugin");
		pb.directory(file(pluginBaseDir));
		proc = pb.start();
		proc.consumeProcessErrorStream(System.err)
		proc.consumeProcessOutputStream(System.out)
		if (proc.waitFor() != 0) {
			throw new RuntimeException('package-plugin GrailsRestDocPlugin failed')
		}
	}
	pb  = new ProcessBuilder("grails", "install-plugin", 
		"${pluginBaseDir}/grails-rest-doc-plugin-${grailsRestDocPluginVersion}.zip");
	pb.directory(file("."));
	proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('install-plugin GrailsRestDocPlugin failed')
	}
	announce.announce("GrailsRestDocPlugin installed", "local")
}

task installGwtVisualizationApi << { task ->
	ProcessBuilder pb;
	Process proc;
	println grailsRestDocPluginVersion
	String apiFilePath = "../libs/gwt-visualization-${gwtVisualizationVersion}.zip"
	if(!file(apiFilePath).exists()) {
		String fileURL = "http://gwt-google-apis.googlecode.com/files/gwt-visualization-${gwtVisualizationVersion}.zip"
		println "--- downloading ${fileURL}"
		ant.get(src:fileURL, dest:apiFilePath)
		ant.unzip(src:apiFilePath, dest:"../libs")
		pb = new ProcessBuilder("mvn", "install:install-file", "-Dfile=gwt-visualization.jar",
			"-DgroupId=com.google.gwt.google-apis", "-DartifactId=gwt-visualization",
			"-Dversion=${gwtVisualizationVersion}", "-Dpackaging=jar", "-Djavadoc=gwt-visualization-javadoc.jar");
		pb.directory(file("../libs/gwt-visualization-${gwtVisualizationVersion}"));
		proc = pb.start();
		proc.consumeProcessErrorStream(System.err)
		proc.consumeProcessOutputStream(System.out)
		if (proc.waitFor() != 0) {
			throw new RuntimeException('package-plugin GrailsRestDocPlugin failed')
		}
		announce.announce("GWT Visualization API installed", "local")
	}
}

task generateRestDocs(dependsOn:['installGrailsRestDocPlugin']) << {task ->
	ProcessBuilder pb  = new ProcessBuilder("grails", "generate-rest-docs");
	pb.directory(new File("."));
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('GrailsRestDocPlugin - generate-rest-docs - failed')
	}
}
task war(dependsOn:['copyAppletDeps', 'installGwtVisualizationApi']) << {task ->
	ProcessBuilder pb = new ProcessBuilder("grails", "war");
	pb.directory(projectDir);
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('war failed')
	}
	announce.announce("$project.name - Done creating WAR", "local")
}


defaultTasks 'runApp'
