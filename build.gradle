version = '0.5.0'

apply plugin: 'java'

subprojects {
	
	repositories {
	   mavenLocal()
	   mavenCentral()
	}

	apply plugin: 'announce'
	
	group = 'org.sistemavotacion'
}

ext {
	appletFirma = null
	appletHerramienta = null
	aplicacionAndroid = null
	certsDataMap = null
}

task buildAll(dependsOn:['SistemaVotacionApplet:signJar', 
	'HerramientaValidacionCopiasDeSeguridad:signJar',
	'SistemaVotacionAndroid:release',
	'SistemaVotacionControlAcceso:war',
	'SistemaVotacionCentroControl:war',
	'SistemaVotacionTest:buildJar']) << {
	
}

dependencies { }

task genAppsCerts(dependsOn:['SistemaVotacionApplet:classes']) {
	
	doFirst { }
	
	doLast {
		rootProject.certsDataMap = [rootCertFile:"$rootProject.projectDir/appsRootCert.jks",
			rootSubjectDN:rootProject.rootSubjectDN,
			password:rootProject.keyStorePassword]
		
		Map certMap = [file:"$rootProject.projectDir/mockDnie.jks",
			distinguishedName:rootProject.appCertDN, alias:rootProject.signKeyAlias,
			isTimeStampingCert:false]
		
		List certs = [certMap]
		rootProject.certsDataMap.certs = certs
		
		tasks.getByPath('SistemaVotacionApplet:genCertsGroovy').execute()
		/*project(':SistemaVotacionApplet').tasks.each {task ->
			println task.path
		}*/
	}
}

task genWebAppsCerts(dependsOn:['SistemaVotacionApplet:classes']) {
	
	doFirst { }
	
	doLast {
		rootProject.certsDataMap = [rootCertFile:"$rootProject.projectDir/webAppsRootCert.jks",
			rootSubjectDN:"$rootProject.rootSubjectDN",
			password:"$rootProject.keyStorePassword"]
		
		Map controAccesoMap = [file:"$rootProject.projectDir/SistemaVotacionControlAcceso/web-app/WEB-INF/cms/ControlAcceso.jks",
			distinguishedName:"$rootProject.controlAccesoDN", alias:"$rootProject.controlAccesoCertAlias",
			isTimeStampingCert:true]
		
		Map centroControMap = [file:"$rootProject.projectDir/SistemaVotacionCentroControl/web-app/WEB-INF/cms/CentroControl.jks",
			distinguishedName:"$rootProject.centroControlDN", alias:"$rootProject.centroControlCertAlias",
			isTimeStampingCert:true]
		
		List certs = [controAccesoMap, centroControMap]
		rootProject.certsDataMap.certs = certs
		tasks.getByPath('SistemaVotacionApplet:classes').execute()
		tasks.getByPath('SistemaVotacionApplet:genCertsGroovy').execute()
	}
}


task uploadApps(dependsOn:['uploadAccessControl', 'uploadControlCenter']) << {}

task uploadAccessControl() << {
	//ncftpput -u jgzornoza -p hola 192.168.1.5 . target/SistemaVotacionControlAcceso.war
	tasks.getByPath('SistemaVotacionControlAcceso:war').execute()

	def warFilePath = "SistemaVotacionControlAcceso/target/SistemaVotacionControlAcceso.war"
	

	ProcessBuilder pb = new ProcessBuilder("ncftpput", "-u", "jgzornoza", 
			"-p", "hola", "$rootProject.testServerIP", ".", warFilePath);
		pb.directory(projectDir);
		Process proc = pb.start();
		proc.consumeProcessErrorStream(System.err)
		proc.consumeProcessOutputStream(System.out)
		if (proc.waitFor() != 0) {
			throw new RuntimeException('runApp failed')
		}
	
}

task uploadControlCenter() << {
	//ncftpput -u jgzornoza -p hola 192.168.1.5 . target/SistemaVotacionCentroControl.war
	tasks.getByPath('SistemaVotacionCentroControl:war').execute()

	def warFilePath = "SistemaVotacionCentroControl/target/SistemaVotacionCentroControl.war"
	
	ProcessBuilder pb = new ProcessBuilder("ncftpput", "-u", "jgzornoza",
		"-p", "hola", "$rootProject.testServerIP", ".", warFilePath);
	pb.directory(projectDir);
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('runApp failed')
	}

}

//tasks.getByPath(':SistemaVotacionApplet:genCerts')

// This is a task that generates the gradlew scripts, allowing users to run gradle without having gradle installed
// on their system.
// This task should be run by "build master" and the resulting output committed to source control.  Its outputs include:
//  1) /gradlew which is the *NIX shell script for executing builds
//  2) /gradlew.bat which is the windows bat script for for executing builds
//  3) /wrapper which is a directory named by the "jarPath" config which contains other needed files.
task wrapper(type: Wrapper) {
	gradleVersion = '1.7'
}
