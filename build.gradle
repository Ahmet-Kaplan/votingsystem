version = '0.5.0'

apply plugin: 'project-report'
apply plugin: 'announce'

subprojects {
	
	repositories {
	   mavenLocal()
	   mavenCentral()
	}

	apply plugin: 'announce'
	group = 'org.votingsystem'
}

ext {
	votingSystemLibrary = null
	votingToolAndroid = null
	certsDataMap = null
}

task buildAll(dependsOn:['VotingSystemLibrary:publish', 'TimeStampServer:war', ':ClientTool:distZip',
                         'AccessControl:war', 'ControlCenter:war', 'Vickets:war', 'Tests:jar', ':releaseAndroid']) << { }


task releaseAndroid () {
    doLast {
        ProcessBuilder pb  = new ProcessBuilder("gradle", "release");
        pb.directory(file("VotingToolAndroidProject"));
        Process proc = pb.start();
        proc.consumeProcessErrorStream(System.err)
        proc.consumeProcessOutputStream(System.out)
        if (proc.waitFor() != 0) {
            throw new Exception("runCommand - project: '${project.name}' - commands: 'gradle release' - failed")
        }
    }
}

tasks.getByPath('AccessControl:war').mustRunAfter releaseAndroid

def initRootCertData() {
    if(!rootProject.certsDataMap) {
        rootProject.certsDataMap = [rootCertFile:"$projectDir/$rootKeyStorePath",
                rootSubjectDN:rootSubjectDN, password:keyStorePassword]
    }
}

def initAppsCertsData() {
    initRootCertData()
    rootProject.certsDataMap = [rootCertFile:"$projectDir/$rootKeyStorePath",
            rootSubjectDN:rootSubjectDN, password:keyStorePassword]

    Map certMap = [file:"$projectDir/$testUserKeyStorePath",
            distinguishedName:rootProject.appCertDN,
            alias:rootProject.signKeyAlias, isTimeStampingCert:false]

    List certs = [certMap]
    rootProject.certsDataMap.certs = certs
}


def initWebAppsCertsData() {
    initRootCertData()
    Map accessControlMap = [file:"$projectDir/AccessControl/web-app/WEB-INF/cms/AccessControl.jks",
            distinguishedName:accessControlDN, alias:accessControlCertAlias,
            isTimeStampingCert:false]

    Map controlCenterMap = [file:"$projectDir/ControlCenter/web-app/WEB-INF/cms/ControlCenter.jks",
            distinguishedName:controlCenterDN, alias:controlCenterCertAlias,
            isTimeStampingCert:false]

    Map timeStampServerMap = [file:"$projectDir/TimeStampServer/web-app/WEB-INF/cms/TimeStampServer.jks",
            distinguishedName:timeStampServerDN, alias:timeStampServerCertAlias,
            isTimeStampingCert:true]

    Map vicketServerMap = [file:"$projectDir/Vickets/web-app/WEB-INF/cms/VicketServer.jks",
            distinguishedName:vicketServerDN, alias:vicketServerCertAlias,
            isTimeStampingCert:true]

    List certs = [accessControlMap, controlCenterMap, timeStampServerMap, vicketServerMap]

    rootProject.certsDataMap.certs = certs
}

task genWebAppsCerts() {
	doLast {
        initWebAppsCertsData()
		tasks.getByPath('VotingSystemLibrary:generateCertificates').execute()
	}
}


task genAppsCerts() {
    doLast {
        initAppsCertsData()
        tasks.getByPath('VotingSystemLibrary:generateCertificates').execute()
    }
}

//allprojects { tasks.withType(Upload){ allprojects { mustRunAfter tasks.matching {it instanceof VerificationTask } } } }
//project.tasks.each {task -> if(task.name.endsWith("AppsCerts")) {}}

task installCerts(dependsOn:['VotingSystemLibrary:publish'])  {
    doFirst { }
    doLast {
        initAppsCertsData()
        initWebAppsCertsData()
        tasks.getByPath('VotingSystemLibrary:generateCertificates').execute()
        /*project(':VotingSystemLibrary').tasks.each {task ->  println task.path}*/
    }
}

task refreshDependencies(dependsOn:['VotingSystemLibrary:publish']) << {
    runCommand(project, file("./AccessControl") ,["grails", "refresh-dependencies"])
    runCommand(project, file("./Vickets") ,["grails", "refresh-dependencies"])
    runCommand(project, file("./ControlCenter") ,["grails", "refresh-dependencies"])
    announce.announce("'$project.name' - Library Dependencies updated", "local")
}

task generateVotingSystemApps(dependsOn: [':VotingSystemLibrary:publish', ':ClientTool:distZip', ':releaseAndroid']) {
}

def copyVotingSystemApps(project) {
    project.file("web-app/android/").mkdirs();
	File votingToolAndroid = project.file("web-app/android/VotingToolAndroid.apk")
	if(votingToolAndroid.exists()) votingToolAndroid.delete()
	votingToolAndroid << file("VotingToolAndroidProject/VotingToolAndroid/VotingToolAndroid.apk")?.bytes
    copyClientTool(project)
}

def copyClientTool(project) {
    project.file("web-app/tools/").mkdirs();
    File clientToolDist = project.file("web-app/tools/${rootProject.clientToolName}.zip")
    if(clientToolDist.exists()) clientToolDist.delete()
    clientToolDist << file("ClientTool/build/distributions/${rootProject.clientToolName}.zip")?.bytes
}

task copyAppsAll(dependsOn: [':AccessControl:copyApps', 'ControlCenter:copyApps', ':Vickets:copyApps']) {}

task initDevEnvironment(dependsOn: ['VotingSystemLibrary:classes', 'initDevEnvironmentApps']) {}
task initDevEnvironmentApps(dependsOn: [':installCerts', ':AccessControl:copyApps']) {}
initDevEnvironmentApps.mustRunAfter tasks.getByPath('VotingSystemLibrary:classes')


task installVotingSystem(dependsOn: ['buildAll', 'initDevEnvironment']) {}
initDevEnvironment.mustRunAfter buildAll

def installGrailsRestDocPlugin(project) {
	String fileURL = "https://github.com/jgzornoza/GrailsRestDocPlugin/" + 
		"archive/v${grailsRestDocPluginVersion}.zip"
	File pluginFile = file("GrailsRestDocPlugin-${grailsRestDocPluginVersion}.zip")
	println "--- downloading ${fileURL}"
	ant.get(src:fileURL, dest:pluginFile)
	ant.unzip(src:pluginFile, dest:".")
	runCommand(project, file("GrailsRestDocPlugin-${grailsRestDocPluginVersion}"), ["grails", "package-plugin"])
	runCommand(project, file("GrailsRestDocPlugin-${grailsRestDocPluginVersion}"), ["grails", "maven-install"])
	project.announce.announce("GrailsRestDocPlugin installed", "local")
}

def runCommand(project, targetDir, commands) {
	ProcessBuilder pb  = new ProcessBuilder(commands);
	pb.directory(targetDir);
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new Exception("runCommand - project: '${project.name}' - commands: ${commands} - failed")
	}
}

task installAllBowerComponents(dependsOn: ['AccessControl:installBowerComponents', 'ControlCenter:installBowerComponents',
           'Vickets:installBowerComponents']) { }

// This is a task that generates the gradlew scripts, allowing users to run gradle without having gradle installed
// on their system.
// This task should be run by "build master" and the resulting output committed to source control.  Its outputs include:
//  1) /gradlew which is the *NIX shell script for executing builds
//  2) /gradlew.bat which is the windows bat script for for executing builds
//  3) /wrapper which is a directory named by the "jarPath" config which contains other needed files.
task wrapper(type: Wrapper) {
	gradleVersion = '2.1'
}
