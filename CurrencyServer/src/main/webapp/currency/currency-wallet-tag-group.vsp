<%@ page contentType="text/html; charset=UTF-8" %>

<link href="${resourceURL}/paper-progress/paper-progress.html" rel="import"/>

<dom-module name="currency-wallet-tag-group" attributes="tag, currencyArray">
    <template>
        <style>
            .tagHeader {font-size: 1.1em; text-decoration: underline;font-weight: bold;margin:5px 0 0 0;
                color: #432; text-align: center;}
            .currency {
                background: #f9f9f9;
                color: #61a753;
                padding:10px;
                margin:10px;
                border-radius: 5px;
                border: 1px solid #61a753;
                font-size: 1.2em;
                text-align: center;
            }
            .currency i {margin:5px 10px 0 0;}
            .core-tooltip {padding: 8px;background: #f9f9f9;border: 1px solid #61a753; color:#61a753; }
        </style>
        <link href="${contextURL}/resources/css/currency.css" media="all" rel="stylesheet" />
        <link href="${resourceURL}/font-awesome/css/font-awesome.min.css" media="all" rel="stylesheet" />
        <div class="vertical layout center center-justified">
            <div class="tagHeader">{{tag | tagDescription}}</div>
            <template repeat="{{currencyMsg in currencyMsgs}}">
                <div style="margin: 5px 0 0 20px;color: #888;">{{currencyMsg}}</div>
            </template>
            <div>
                <template repeat="{{currency in currencyArray}}">
                    <core-tooltip position="top" noarrow="false">
                        <div class="currency horizontal layout center center-justified" on-click="showCurrency">
                            <i class="fa {{currency.currencyCode | currencyIcon}}"></i>
                            {{currency.currencyValue}} {{currency.currencyCode}}
                            <template if="{{currency | isTimeLimited}}">
                                <div style="font-size: 1em; margin: 0 0 0 5px;">
                                    <i class="fa fa-clock-o"></i>
                                </div>
                            </template>
                        </div>
                        <div tip>
                            <template if="{{currency | isTimeLimited}}">
                                <div style="font-size: 2em; margin: 10px 10px 20px 10px;">${msg.expendBeforeMonday}</div>
                            </template>
                            <div style="font-size: 1.2em; margin: 10px 10px 15px 10px;">{{currency | dateInfo}}</div>
                        </div>
                    </core-tooltip>
                </template>
            </div>
        </div>
    </template>
    <script>
        Polymer({
            is:'currency-wallet-tag-group',
            //Info inside currency: currencyServerURL, currencyValue, currencyCode, tag, notBefore, notAfter, hashCertVS
            currencyMsgs:[],
            publish: {
                currencyArray: {value: {}}
            },
            ready: function() {
                console.log(this.tagName + " - ready")
            },
            tagDescription:function(tag) {
                if("WILDTAG" === tag) return "${msg.wildTagLbl}".toUpperCase()
                else return tag
            },
            dateInfo:function(currency) {
                var notBefore = new Date(currency.notBefore)
                var notAfter = new Date(currency.notAfter)
                return "${msg.dateRangeMsg}".format(notBefore, notAfter)
            },
            isTimeLimited:function(currency) {
                var notBefore = DateUtils.parse(currency.notBefore)
                var notAfter = DateUtils.parse(currency.notAfter)
                var dayDiff = notAfter.daydiff(notBefore)
                return dayDiff <= 7 //if lower than seven days -> timeLimited
            },
            currencyIcon: function(currencyCode) {
                switch(currencyCode) {
                    case 'EUR': return "fa-eur"
                    case 'USD': return "fa-dollar"
                    case 'JPY': return "fa-yen"
                    case 'CNY': return "fa-cny"
                    default: return "fa-money"
                }
            },
            currencyArrayChanged:function() {
                console.log(this.tagName + " - currencyArrayChanged")
                var tagGroupMap = {}
                this.currencyMsgs = []
                for(currencyIdx in this.currencyArray) {
                    var currency = this.currencyArray[currencyIdx]
                    try {
                        //{{currency.currencyValue}} {{currency.currencyCode}} {{currency.timeLimited}}
                        if(tagGroupMap[currency.currencyCode]) {
                            if(currency.timeLimited === true) {
                                tagGroupMap[currency.currencyCode].timeLimited = addNumbers(
                                                tagGroupMap[currency.currencyCode].timeLimited, currency.currencyValue)
                            }
                            tagGroupMap[currency.currencyCode].total = addNumbers(tagGroupMap[currency.currencyCode].total, currency.currencyValue)
                        } else {
                            var timeLimited = (currency.timeLimited === true)?currency.currencyValue:0
                            tagGroupMap[currency.currencyCode] = {timeLimited: timeLimited, total:currency.currencyValue}
                        }
                    } catch(ex) {console.log(Ex)}

                }
                var currencies = Object.keys(tagGroupMap)
                console.log("currencies: " + currencies)
                for(currencyIdx in currencies) {
                    var currency = currencies[currencyIdx]
                    var msg = currency + ". ${msg.totalLbl}: " + tagGroupMap[currency].total
                    if(tagGroupMap[currency].timeLimited > 0) msg = msg +
                            " (${msg.timeLimitedForTagShortMsg})".format(tagGroupMap[currency].timeLimited)
                    this.currencyMsgs.push(msg)
                }
            },
            showCurrency: function(e) {
                var operationVS = new OperationVS(Operation.CURRENCY_OPEN)
                operationVS.message = e.model.item.object
                operationVS.setCallback(function(appMessage) {
                    console.log("showCurrency - message: " + appMessage);
                }.bind(this))
                VotingSystemClient.setMessage(operationVS);
            }
        });
    </script>
</dom-module>


