<%@ page contentType="text/html; charset=UTF-8" %>

<link href="${resourceURL}/polymer/polymer.html" rel="import"/>
<link href="${elementURL}/element/reason-dialog.vsp" rel="import"/>
<link href="${resourceURL}/paper-dialog/paper-dialog.html" rel="import"/>
<link href="${resourceURL}/paper-dialog/paper-dialog-transition.html" rel="import"/>


<polymer-element name="groupvs-user" attributes="userId subscriptionDataURLPrefix opened">
    <template>
        <paper-dialog id="xDialog" autoCloseDisabled layered backdrop class="uservsDialog" style="border: 1px solid #6c0404;">
            <link href="${contextURL}/resources/css/currency.css" media="all" rel="stylesheet" />
            <link href="${resourceURL}/font-awesome/css/font-awesome.min.css" media="all" rel="stylesheet" />
            <core-ajax id="ajax" url="{{url}}" response="{{subscriptionData}}" handleAs="json" method="get"
                       contentType="application/json" on-core-response="{{ajaxResponse}}"></core-ajax>
            <div layout vertical>
                <div layout horizontal center center-justified>
                    <div flex style="font-size: 1.5em; font-weight: bold; color:#6c0404;">
                        <div style="text-align: center;">{{subscriptionData.uservs.name}}</div>
                    </div>
                    <div style="position: absolute; top: 0px; right: 0px;">
                        <core-icon-button on-click="{{close}}" icon="close" style="fill:#6c0404; color:#6c0404;"></core-icon-button>
                    </div>
                </div>
                <div>
                    <div horizontal layout style="font-size: 0.8em; margin: 5px 0 10px 0;">
                        <div style="font-weight: bold;color:#888;" flex>NIF: {{subscriptionData.uservs.nif}}</div>
                        <div hidden?="{{!subscriptionData.uservs.iban}}" style="font-weight: bold;color:#888;">
                            IBAN: {{subscriptionData.uservs.iban}}</div>
                    </div>
                    <div id="contentDiv">${msg.subscriptionRequestDateLbl}:
                        <span id="dateCreatedDiv"> {{getDate(subscriptionData.dateCreated)}}</span></div>
                </div>
                <div horizontal layout center center-justified style="margin:10px 0 0 0;">
                    <div hidden?="{{!isClientToolConnected}}">
                        <button hidden?="{{'admin' !== menuType || isActive}}" on-click="{{activateUser}}">
                            <i class="fa fa-thumbs-o-up"></i> ${msg.activateUserLbl}
                        </button>
                        <button hidden?="{{'admin' !== menuType || isCancelled}}" on-click="{{initCancellation}}">
                            <i class="fa fa-thumbs-o-down"></i> ${msg.deActivateUserLbl}
                        </button>
                    </div>
                    <button on-click="{{goToUserVSPage}}">
                        <i class="fa fa-user"></i> ${msg.userVSPageLbl}
                    </button>
                </div>
                <div id="receipt" style="display:none;"> </div>
            </div>
            <div style="position: absolute; width: 100%; top:0px;left:0px;">
                <div layout horizontal center center-justified style="padding:0px 0px 0px 0px;margin:0px auto 0px auto;">
                    <reason-dialog id="reasonDialog" caption="${msg.cancelSubscriptionFormCaption}" opened="false"
                                       messageToUser="${msg.cancelSubscriptionFormMsg}"></reason-dialog>
                </div>
            </div>
        </paper-dialog>
    </template>
    <script>
        Polymer('groupvs-user', {
            isClientToolConnected:false,
            publish: { subscriptionData: {}},
            ready :  function(e) {
                this.menuType = menuType
                this.isClientToolConnected = window['isClientToolConnected']
                this.$.reasonDialog.addEventListener('on-submit', function (e) {
                    console.log("deActivateUser")
                    var operationVS = new OperationVS(Operation.CURRENCY_GROUP_USER_DEACTIVATE)
                    operationVS.serviceURL = "${restURL}/groupVS/deActivateUser"
                    operationVS.signedMessageSubject = "${msg.deActivateGroupUserMessageSubject}" + " '" + this.subscriptionData.groupvs.name + "'"
                    operationVS.jsonStr = JSON.stringify({groupvsId:this.subscriptionData.groupvs.id,
                        groupvsName:this.subscriptionData.groupvs.name, userVSName:this.subscriptionData.uservs.name,
                        userVSNIF:this.subscriptionData.uservs.nif, reason:e.detail})
                    operationVS.setCallback(function(appMessage) {
                        console.log("deActivateUserCallback - message: " + appMessage);
                        var appMessageJSON = toJSON(appMessage)
                        var caption = '${msg.deActivateUserERRORLbl}'
                        if(ResponseVS.SC_OK == appMessageJSON.statusCode) {
                            caption = "${msg.deActivateUserOKLbl}"
                        }
                        var msg = appMessageJSON.message
                        showMessageVS(msg, caption)
                    }.bind(this))
                    VotingSystemClient.setMessage(operationVS);
                }.bind(this))
            },
            getDate:function(timStamp) {
                return new Date(timStamp).getDayWeekAndHourFormat()
            },
            goToUserVSPage:function() {
                loadURL_VS("${restURL}/userVS/id/" + this.userId, "_blank")
                this.$.xDialog.opened = false
            },
            openedChanged:function() {
                this.async(function() { this.$.xDialog.opened = this.opened});
            },
            subscriptionDataChanged:function() {
                console.log(this.tagName + "subscriptionDataChanged - subscriptionData: " + this.subscriptionData)
            },
            show:function(baseURL, userId) {
                if(baseURL && userId) {
                    this.subscriptionDataURLPrefix = baseURL
                    this.userId = userId
                    this.$.ajax.url = this.subscriptionDataURLPrefix + "/" + this.userId
                    this.$.ajax.go()
                }
                this.$.xDialog.opened = true
            },
            activateUser : function(e) {
                console.log("activateUser")
                var operationVS = new OperationVS(Operation.CURRENCY_GROUP_USER_ACTIVATE)
                operationVS.serviceURL = "${restURL}/groupVS/activateUser"
                operationVS.signedMessageSubject = "${msg.activateGroupUserMessageSubject}" + " '" +
                        this.subscriptionData.groupvs.name + "'"
                operationVS.jsonStr = JSON.stringify({operation:Operation.CURRENCY_GROUP_USER_ACTIVATE,
                    groupvsId:this.subscriptionData.groupvs.id, groupvsName:this.subscriptionData.groupvs.name,
                    userVSName:this.subscriptionData.uservs.name, userVSNIF:this.subscriptionData.uservs.nif})
                operationVS.setCallback(function(appMessage) {
                    console.log("activateUserCallback - message: " + appMessage);
                    var appMessageJSON = toJSON(appMessage)
                    if(appMessageJSON != null) {
                        var caption = '${msg.activateUserERRORLbl}'
                        if (ResponseVS.SC_OK == appMessageJSON.statusCode) {
                            caption = "${msg.activateUserOKLbl}"
                            this.opened = false
                            this.fire('core-signal', {name: "refresh-uservs-list", data: {uservs: this.userId}});
                        }
                        showMessageVS(appMessageJSON.message, caption)
                    }
                }.bind(this))
                VotingSystemClient.setMessage(operationVS);
            },
            initCancellation : function(e) {
                this.$.reasonDialog.show();
            },
            ajaxResponse:function() {
                this.isActive = false
                this.isPending = false
                this.isCancelled = false
                if('ACTIVE' == this.subscriptionData.state) {
                    this.isActive = true
                    this.caption = "${msg.userStateActiveLbl}"
                } else if('PENDING' == this.subscriptionData.state) {
                    this.isPending = true
                    this.caption = "${msg.userStatePendingLbl}"
                } else if('CANCELED' == this.subscriptionData.state) {
                    this.isCancelled = true
                    this.caption = "${msg.userStateCancelledLbl}"
                }
            },
            close: function() {
                this.$.xDialog.opened = false
            }
        });
    </script>
</polymer-element>