version = '0.5.0'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'

repositories {
	mavenLocal()
	mavenCentral()
 }

ext.groovyVersion = '2.1.0'

dependencies {
	
	compile localGroovy()
	
	//compile 'org.codehaus.groovy:groovy-all:2.1.0'
	compile 'commons-cli:commons-cli:1.2'
	
	groovy "org.codehaus.groovy:groovy:$ext.groovyVersion"
	
	compile ('org.apache.httpcomponents:httpmime:4.2.4',
		'org.apache.httpcomponents:httpclient:4.2.4',
		'net.sf.json-lib:json-lib:2.4:jdk15',
		'org.bouncycastle:bcprov-jdk16:1.46',
		'org.bouncycastle:bcmail-jdk16:1.46',
		'javax.mail:mail:1.4.1',
		'javax.activation:activation:1.1.1',
		'org.slf4j:slf4j-log4j12:1.5.8',
		'org.bouncycastle:bctsp-jdk16:1.46',
		'log4j:log4j:1.2.12',
		'com.itextpdf:itextpdf:5.1.3')
	compile files('../libs/plugin-1.3.jar')
	testCompile 'junit:junit:4.8.2'
	
}

task genCertsJava(dependsOn: ['classes'], type: JavaExec) {
	
	onlyIf {rootProject.certsDataMap}
	
	doFirst {
		args groovy.json.JsonOutput.toJson(rootProject.certsDataMap)
	}
	
	main = 'org.sistemavotacion.CertGenerator'
	classpath = sourceSets.main.runtimeClasspath
}

task genCertsGroovy(dependsOn: ['classes'], type: JavaExec) {
	
	onlyIf {rootProject.certsDataMap}
	
	doFirst {
		args groovy.json.JsonOutput.toJson(rootProject.certsDataMap)
		//args "-h"
		main = 'org.sistemavotacion.CertGen'
		classpath = sourceSets.main.runtimeClasspath
	}
	
}


jar {
	manifest {
		attributes 'Main-Class': 'org.sistemavotacion.AppletFirma',
				   'SplashScreen-Image':'resources/images/cert_100x108.png',
				   'url':'https://github.com/jgzornoza/SistemaVotacion/tree/master/SistemaVotacionApplet',
				   'provider': 'GruposP2P'
	}
	
}

task buildVotingApplet(type:VotingSystemApplet){

	manifest {
		attributes 'Main-Class': 'org.sistemavotacion.AppletFirma',
				   'SplashScreen-Image':'resources/images/cert_100x108.png',
				   'url':'https://github.com/jgzornoza/SistemaVotacion/tree/master/SistemaVotacionApplet',
				   'provider': 'GruposP2P'
	}
}

task signJar(dependsOn: ['buildVotingApplet', 'copydeps']) {
	doLast {
		ant.signjar(keystore: "$rootProject.projectDir/mockDnie.jks",
			storepass:rootProject.keyStorePassword,
			alias:rootProject.signKeyAlias,
			jar:jar.archivePath,
			signedjar:"$buildDir/$rootProject.signAppletJarName")
		rootProject.ext.set("appletFirma",file("$buildDir/$rootProject.signAppletJarName"))
		announce.announce("$rootProject.signAppletJarName firmado y puesto en contexto de construcci√≥n", "local")
	}
	
}

task copydeps(type: Copy) {
	doFirst {
		def file = file("$buildDir/appletdeps")
		file.deleteDir()
		println "${file.path} deleted"
	}
	
	into "$buildDir/appletdeps"
	def bcJar = project.configurations.runtime.find { 
		it.name.startsWith("bcprov-") }
	if(bcJar) ant.copy(file:bcJar, todir:file("$buildDir/appletdeps").path) 

	/*doLast {
		def bcJars = ["bcprov-jdk16-1.46.jar", "bcmail-jdk16-1.46.jar",
			"bctsp-jdk16-1.46.jar"]
		def depFiles = file("$buildDir/appletdeps")
		depFiles.eachFile() {
			if(!bcJars.contains(it.name)) {
				println "signing: " + it.path
				ant.signjar(keystore: "$rootProject.projectDir/mockDnie.jks",
					storepass:rootProject.keyStorePassword,
					alias:rootProject.signKeyAlias,
					jar:it.path,
					signedjar:it.path)
			}
				
		}
	}*/

}


project.ext {
  mainClass = "org.sistemavotacion.AppletFirma"
}


classes.dependsOn cleanCompileJava
jar.dependsOn classes
buildVotingApplet.dependsOn classes
install.dependsOn copydeps

sourceSets {
	main {
	  //to override the defaults:
	  //output.resourcesDir = "$buildDir/classes"
	  output.classesDir   = "$buildDir/classes"
	}
}
