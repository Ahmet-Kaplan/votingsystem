package org.sistemavotacion.test.dialogo;

import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicLong;
import javax.swing.JDialog;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import net.sf.json.JSONException;
import org.sistemavotacion.modelo.Evento;
import org.sistemavotacion.modelo.Respuesta;
import org.sistemavotacion.test.ContextoPruebas;
import org.sistemavotacion.test.MainFrame;
import org.sistemavotacion.test.json.DeJSONAObjeto;
import org.sistemavotacion.test.modelo.SolicitudAcceso;
import org.sistemavotacion.test.panel.DigitalClockPanel;
import org.sistemavotacion.test.simulacion.LanzadoraAnulacionSolicitudAcceso;
import static org.sistemavotacion.test.simulacion.Votacion.MAX_PENDING_RESPONSES;
import org.sistemavotacion.test.util.FileNameFilter;
import org.sistemavotacion.util.DateUtils;
import org.sistemavotacion.util.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
* @author jgzornoza
* Licencia: https://github.com/jgzornoza/SistemaVotacion/blob/master/licencia.txt
*/
public class AnularVotosDialog extends JDialog implements SelectorArchivosListener {
    
    private static Logger logger = LoggerFactory.getLogger(AnularVotosDialog.class);
    
    public enum Estado {RECOGIENDO_DATOS, ANULANDO_VOTOS}
    
    private MensajeDialog mensajeDialog;
    private static long comienzo;
    private StringBuilder erroresAnulaciones = new StringBuilder("<html>");
    private SwingWorker tareaEnEjecucion;
    private Evento evento;
    private Estado estado = Estado.RECOGIENDO_DATOS;
    private static ExecutorService operationExecutor;
    private static ExecutorService solicitudesExecutor;
    private static CompletionService<Respuesta> anulacionSolicitudesCompletionService;
    private static AtomicLong anulacionesEnviadas;
    private static AtomicLong anulacionesEnviadasOK;
    private static AtomicLong anulacionesEnviadasERROR;
    
    /**
     * Creates new form AnularVotosDialog
     */
    public AnularVotosDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);   
        progressBar.setIndeterminate(true);
        progressBarPanel.setVisible(false);
        contadorPanel.setVisible(false);
        operationExecutor = Executors.newFixedThreadPool(5);
        solicitudesExecutor = Executors.newFixedThreadPool(100);
        erroresAnulacionButton.setVisible(false);
        anulacionSolicitudesCompletionService = 
                new ExecutorCompletionService<Respuesta>(solicitudesExecutor);
    }
    
    public AnularVotosDialog(java.awt.Frame parent, boolean modal, Evento evento) {
        this(parent, modal);
        this.evento = evento;
        if(evento != null)
                asuntoLabel.setText(
                "<html><b>Asunto: </b>" + evento.getAsunto() + "</html>");
        pack();
    }
    
    private void mostarPantallaEnvio(boolean mostrar) {
        progressBarPanel.setVisible(mostrar);
        formularioPanel.setVisible(!mostrar);
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        explicacionTecnicaButton = new javax.swing.JButton();
        cerrarButton = new javax.swing.JButton();
        asuntoLabel = new javax.swing.JLabel();
        progressBarPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();
        formularioPanel = new javax.swing.JPanel();
        anularTodosButton = new javax.swing.JButton();
        seleccionarIdDeListaButton = new javax.swing.JButton();
        contadorPanel = new javax.swing.JPanel();
        contadorSolicitudesLabel = new javax.swing.JLabel();
        contadorSolicitudesErrorLabel = new javax.swing.JLabel();
        contadorSolicitudesOKLabel = new javax.swing.JLabel();
        timePanel = new javax.swing.JPanel();
        timeLabel = new javax.swing.JLabel();
        digitalClockPanel = new org.sistemavotacion.test.panel.DigitalClockPanel();
        erroresAnulacionButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Anulación de votos");

        explicacionTecnicaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/information-white.png"))); // NOI18N
        explicacionTecnicaButton.setText("Fundamentos técnicos del procedimiento");
        explicacionTecnicaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                explicacionTecnicaButtonActionPerformed(evt);
            }
        });

        cerrarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel_16x16.png"))); // NOI18N
        cerrarButton.setText("Cerrar");
        cerrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarButtonActionPerformed(evt);
            }
        });

        asuntoLabel.setText(" ");

        progressLabel.setText(" ");

        javax.swing.GroupLayout progressBarPanelLayout = new javax.swing.GroupLayout(progressBarPanel);
        progressBarPanel.setLayout(progressBarPanelLayout);
        progressBarPanelLayout.setHorizontalGroup(
            progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        progressBarPanelLayout.setVerticalGroup(
            progressBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressBarPanelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(progressLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        anularTodosButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/CancelAll_16x16.png"))); // NOI18N
        anularTodosButton.setText("Anular todos los votos de la simulación");
        anularTodosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anularTodosButtonActionPerformed(evt);
            }
        });

        seleccionarIdDeListaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/select_16x16.png"))); // NOI18N
        seleccionarIdDeListaButton.setText("Seleccionar solicitud acceso ");
        seleccionarIdDeListaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarIdDeListaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout formularioPanelLayout = new javax.swing.GroupLayout(formularioPanel);
        formularioPanel.setLayout(formularioPanelLayout);
        formularioPanelLayout.setHorizontalGroup(
            formularioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formularioPanelLayout.createSequentialGroup()
                .addComponent(anularTodosButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seleccionarIdDeListaButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        formularioPanelLayout.setVerticalGroup(
            formularioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formularioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formularioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anularTodosButton)
                    .addComponent(seleccionarIdDeListaButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        contadorPanel.setBackground(java.awt.Color.white);
        contadorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        contadorSolicitudesLabel.setText("<html><b>Lanzada anulación: </b>0</html>");

        contadorSolicitudesErrorLabel.setText("<html><b>Errores: </b>0</html>");

        contadorSolicitudesOKLabel.setText("<html><b>Operaciones con éxito: </b>0</html>");

        timePanel.setBackground(java.awt.Color.white);

        timeLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        timeLabel.setText("Duración operacion:");

        javax.swing.GroupLayout timePanelLayout = new javax.swing.GroupLayout(timePanel);
        timePanel.setLayout(timePanelLayout);
        timePanelLayout.setHorizontalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timePanelLayout.createSequentialGroup()
                .addComponent(timeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(digitalClockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        timePanelLayout.setVerticalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeLabel)
                    .addComponent(digitalClockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout contadorPanelLayout = new javax.swing.GroupLayout(contadorPanel);
        contadorPanel.setLayout(contadorPanelLayout);
        contadorPanelLayout.setHorizontalGroup(
            contadorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contadorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contadorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contadorPanelLayout.createSequentialGroup()
                        .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(contadorSolicitudesLabel)
                    .addComponent(contadorSolicitudesErrorLabel)
                    .addComponent(contadorSolicitudesOKLabel))
                .addContainerGap())
        );
        contadorPanelLayout.setVerticalGroup(
            contadorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contadorPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contadorSolicitudesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contadorSolicitudesErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contadorSolicitudesOKLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
        );

        erroresAnulacionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/error.png"))); // NOI18N
        erroresAnulacionButton.setText("Errores en anulaciones");
        erroresAnulacionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                erroresAnulacionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contadorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(formularioPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(asuntoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(erroresAnulacionButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(explicacionTecnicaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cerrarButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(asuntoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formularioPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contadorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(erroresAnulacionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(explicacionTecnicaButton)
                    .addComponent(cerrarButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void explicacionTecnicaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_explicacionTecnicaButtonActionPerformed
        //String theString = new Scanner(Thread.currentThread().getContextClassLoader()
        //        .getResourceAsStream("AnularVoto.html")).useDelimiter("\\A").next();
        String msg = ContextoPruebas.getString("cancelVoteDetailsMsg");
        mensajeDialog = new MensajeDialog(MainFrame.INSTANCIA.getFrames()[0], true,
                new Dimension(600, 400));
        mensajeDialog.setMessage(msg, ContextoPruebas.getString("cancelVoteCaption"));
    }//GEN-LAST:event_explicacionTecnicaButtonActionPerformed

    private void cerrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarButtonActionPerformed
        if(mensajeDialog != null) mensajeDialog.dispose();
        switch (estado) {
            case ANULANDO_VOTOS:
                if(tareaEnEjecucion != null) tareaEnEjecucion.cancel(true);
                finalizarAnulacion();
                break;
            case RECOGIENDO_DATOS:
                dispose();
                break;
        }
    }//GEN-LAST:event_cerrarButtonActionPerformed

    private void seleccionarIdDeListaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarIdDeListaButtonActionPerformed
        String nombreArchivoSolicitud = ContextoPruebas.ANULACION_FILE + evento.getEventoId();
        Collection<File> solicitudesAcceso = FileNameFilter.getFilesFromDirectoryTree(
                new File(ContextoPruebas.APPDIR), nombreArchivoSolicitud);
        logger.debug("############# Encontradas '" + solicitudesAcceso.size() + "' solicitudes"
                + "  para el evento '" +  evento.getEventoId() + "'");
        Collection<SolicitudAcceso> solicitudes = obtenerSolicitudesAcceso(solicitudesAcceso);
        SeleccionArchivosDialog seleccionArchivosDialog = new SeleccionArchivosDialog(
                MainFrame.INSTANCIA.getFrames()[0], true ,solicitudes, evento, this);
        seleccionArchivosDialog.setVisible(true);
    }//GEN-LAST:event_seleccionarIdDeListaButtonActionPerformed

    private void anularTodosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anularTodosButtonActionPerformed
        mostarPantallaEnvio(true);
        digitalClockPanel.start(DigitalClockPanel.Mode.STOPWATCH);
        contadorPanel.setVisible(true);
        String nombreArchivoSolicitud = ContextoPruebas.ANULACION_FILE + evento.getEventoId();
        progressLabel.setText("Leyendo solicitudes en el sistema de ficheros");
        Collection<File> solicitudes = FileNameFilter.getFilesFromDirectoryTree(
                new File(ContextoPruebas.APPDIR), nombreArchivoSolicitud);
        logger.debug("Encontradas '" + solicitudes.size() + "' solicitudes"
                + "  para el evento '" +  evento.getEventoId() + "'");
        List<SolicitudAcceso> solicitudesAcceso =  obtenerSolicitudesAcceso(solicitudes);
        lanzarOperacion(solicitudesAcceso);
    }//GEN-LAST:event_anularTodosButtonActionPerformed

    private void erroresAnulacionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_erroresAnulacionButtonActionPerformed
        InfoErroresDialog infoErroresDialog = new InfoErroresDialog(
                MainFrame.INSTANCIA.getFrames()[0], true, 
                "Errores en las anulaciones", erroresAnulaciones.toString());
        infoErroresDialog.setVisible(true);
    }//GEN-LAST:event_erroresAnulacionButtonActionPerformed

    public void lanzarOperacion(final List<SolicitudAcceso> solicitudesAcceso) {
        logger.debug("lanzarAnulacion");
        comienzo = System.currentTimeMillis();
        erroresAnulacionButton.setVisible(false);
        logger.debug("Encontradas '" + solicitudesAcceso.size() + "' solicitudes"
                + "  para el evento '" +  evento.getEventoId() + "'");  
        progressLabel.setText("Anulando " + solicitudesAcceso.size() + " solicitudes de acceso");
        estado = Estado.ANULANDO_VOTOS;
        anulacionesEnviadas = new AtomicLong();
        actualizarContadorSolicitudes(
                new Long(anulacionesEnviadas.get()).intValue());
        anulacionesEnviadasOK = new AtomicLong();
        actualizarContadorSolicitudesOK(
                new Long(anulacionesEnviadasOK.get()).intValue());
        anulacionesEnviadasERROR = new AtomicLong();
        actualizarContadorSolicitudesError(
                new Long(anulacionesEnviadasERROR.get()).intValue());
        erroresAnulaciones = new StringBuilder("<html>");
        operationExecutor.execute(new Runnable() {
            @Override
            public void run() {
                try {
                    logger.debug("Lanzado hilo de anulaciones de solicitudes de acceso");
                    lanzarAnulacionesSolicitudesAcceso(solicitudesAcceso); 
                } catch (Exception ex) {
                    logger.error(ex.getMessage(), ex);
                }
            }

        });
        operationExecutor.execute(new Runnable() {
            @Override
            public void run() {
                try {
                    logger.debug("Lanzado hilo de comprobación de respuestas");
                    comprobarRespuestas(solicitudesAcceso.size());
                } catch (Exception ex) {
                    logger.error(ex.getMessage(), ex);
                }
            }

        });
        pack();
    }
    
    
    private void comprobarRespuestas(int numeroAnulaciones) 
            throws InterruptedException, ExecutionException {
        for (int v = 0; v < numeroAnulaciones; v++) {
            logger.debug("Comprobando respuesta");
            Future<Respuesta> f = anulacionSolicitudesCompletionService.take();
            final Respuesta respuesta = f.get();
            if(Respuesta.SC_OK == respuesta.getCodigoEstado()) {
                logger.debug("Anulación correcta");
                actualizarContadorSolicitudesOK(
                        new Long(anulacionesEnviadasOK.incrementAndGet()).intValue());
            } else {
                logger.debug("Error anulando Solicitud - " + respuesta.getMensaje());
                SolicitudAcceso solicitud = (SolicitudAcceso) respuesta.getObjeto();
                String mensaje = null;
                if(solicitud != null) {
                    String usuarioPath = ContextoPruebas.getUserDirPath(solicitud.getUserNif());
                    String htmlUsuarioPath = "<a href=\"SistemaVotacion:File:" 
                            + usuarioPath + "\">" + solicitud.getUserNif() + "</a>";
                    mensaje = "Error en la anulacion del evento '" + 
                            solicitud.getEventoId() + "' para el usuario " + htmlUsuarioPath + 
                            " - <b>mensaje:</b> " + respuesta.getMensaje() + "<br/>";
                } else  mensaje = respuesta.getMensaje() + "<br/>";
                erroresAnulaciones.append(mensaje);
                anulacionesEnviadasERROR.getAndIncrement();
                actualizarContadorSolicitudesError(
                        new Long(anulacionesEnviadasERROR.get()).intValue());
            }
        }
        finalizarAnulacion();
    }
    
    private void finalizarAnulacion () {
        String duracion = DateUtils.getElapsedTimeHoursMinutesMillisFromMilliseconds(
                            System.currentTimeMillis() - comienzo);
        logger.debug("Duración: " + duracion);
        digitalClockPanel.stop();
        mostarPantallaEnvio(false);
        erroresAnulaciones.append("<html/>");
        if(anulacionesEnviadasERROR.get() > 0) {
            erroresAnulacionButton.setVisible(true);
            pack();
        }
        estado = Estado.RECOGIENDO_DATOS;
    }
    
    public void actualizarContadorSolicitudesError(final int numSolicitud) {
        if(SwingUtilities.isEventDispatchThread()) {
            contadorSolicitudesErrorLabel.setText(
                    "<html><b>Errores: </b>"
                     + numSolicitud + "</html>");
        } else {
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        contadorSolicitudesErrorLabel.setText(
                        "<html><b>Errores: </b>"
                        + numSolicitud + "</html>");
                    }
                });
            } catch (Exception ex) {
                logger.error(ex.getMessage(), ex);
            }
        }
    }
    
    public void actualizarContadorSolicitudesOK(final int numSolicitud) {
        if(SwingUtilities.isEventDispatchThread()) {
            contadorSolicitudesOKLabel.setText(
                    "<html><b>Operaciones con éxito: </b>"
                     + numSolicitud + "</html>");
        } else {
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        contadorSolicitudesOKLabel.setText(
                        "<html><b>Operaciones con éxito: </b>"
                        + numSolicitud + "</html>");
                    }
                });
            } catch (Exception ex) {
                logger.error(ex.getMessage(), ex);
            }
        }
    }
    
    public void actualizarContadorSolicitudes(final int numSolicitud) {
        if(SwingUtilities.isEventDispatchThread()) {
            contadorSolicitudesLabel.setText(
                    "<html><b>Lanzada anulación: </b>"
                     + numSolicitud + "</html>");
        } else {
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        contadorSolicitudesLabel.setText(
                        "<html><b>Lanzada anulación: </b>"
                        + numSolicitud + "</html>");
                    }
                });
            } catch (Exception ex) {
                logger.error(ex.getMessage(), ex);
            }
        }
    }
        
    public void lanzarAnulacionesSolicitudesAcceso (
            List<SolicitudAcceso> solicitudesAcceso) throws Exception {
        for(SolicitudAcceso solicitud : solicitudesAcceso) {
            while(anulacionesEnviadas.get() - (anulacionesEnviadasOK.get() + 
                    anulacionesEnviadasERROR.get()) > MAX_PENDING_RESPONSES ) {}
            lanzarAnulacionSolicitudAcceso(solicitud);
        }
    }
    
    public void lanzarAnulacionSolicitudAcceso (SolicitudAcceso solicitud) throws Exception {
        anulacionSolicitudesCompletionService.submit(
                new LanzadoraAnulacionSolicitudAcceso(solicitud));
        actualizarContadorSolicitudes(
                new Long(anulacionesEnviadas.incrementAndGet()).intValue());
     }
    
    private List<SolicitudAcceso> obtenerSolicitudesAcceso(Collection<File> archivos) {
        List<SolicitudAcceso>  solicitudes = new ArrayList<SolicitudAcceso>();
        for(File archivo:archivos) {
            String anuladorStr = null;
            try {
                anuladorStr = FileUtils.getStringFromFile(archivo);
                SolicitudAcceso solicitud = DeJSONAObjeto.obtenerSolicitudAcceso(anuladorStr);
                String[] splittedName = archivo.getName().split("_usu");
                solicitud.setUserNif(splittedName[1].split(".json")[0]);
                solicitud.setEventoId(archivo.getName().split("_")[1]);
                solicitud.setArchivo(archivo);
                solicitudes.add(solicitud);
            } catch (Exception ex) {
                logger.error(ex.getMessage(), ex);
                if(ex instanceof JSONException) {
                    logger.debug("anuladorStr: " + anuladorStr + 
                            " - archivo: " + archivo.getAbsolutePath());
                }
            }            
        }
        return solicitudes;
    }
    
    
    @Override
    public void setArchivosSeleccionados(Object archivos, Object selector) {
        if(selector instanceof SeleccionArchivosDialog) {
            List<SolicitudAcceso> solicitudesAcceso =  (List<SolicitudAcceso>) archivos;
            if(solicitudesAcceso.size() > 0) {
                mostarPantallaEnvio(true);
                digitalClockPanel.start(DigitalClockPanel.Mode.STOPWATCH);
                contadorPanel.setVisible(true);
                lanzarOperacion(solicitudesAcceso);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnularVotosDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnularVotosDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnularVotosDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnularVotosDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                AnularVotosDialog dialog = new AnularVotosDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anularTodosButton;
    private javax.swing.JLabel asuntoLabel;
    private javax.swing.JButton cerrarButton;
    private javax.swing.JPanel contadorPanel;
    private javax.swing.JLabel contadorSolicitudesErrorLabel;
    private javax.swing.JLabel contadorSolicitudesLabel;
    private javax.swing.JLabel contadorSolicitudesOKLabel;
    private org.sistemavotacion.test.panel.DigitalClockPanel digitalClockPanel;
    private javax.swing.JButton erroresAnulacionButton;
    private javax.swing.JButton explicacionTecnicaButton;
    private javax.swing.JPanel formularioPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel progressBarPanel;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JButton seleccionarIdDeListaButton;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JPanel timePanel;
    // End of variables declaration//GEN-END:variables
}
