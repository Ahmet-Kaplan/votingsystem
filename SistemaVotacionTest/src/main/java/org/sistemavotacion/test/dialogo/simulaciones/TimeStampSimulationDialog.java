package org.sistemavotacion.test.dialogo.simulaciones;

import java.awt.Frame;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;
import javax.swing.JDialog;
import javax.swing.UIManager;
import org.sistemavotacion.modelo.Respuesta;
import org.sistemavotacion.test.ContextoPruebas;
import org.sistemavotacion.test.dialogo.InfoErroresDialog;
import org.sistemavotacion.test.modelo.SimulationData;
import org.sistemavotacion.test.panel.DigitalClockPanel;
import org.sistemavotacion.test.simulation.SimulatorListener;
import org.sistemavotacion.test.simulation.TimeStampSimulator;
import org.sistemavotacion.util.DateUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
* @author jgzornoza
* Licencia: https://github.com/jgzornoza/SistemaVotacion/wiki/Licencia
*/
public class TimeStampSimulationDialog extends JDialog implements 
        SimulatorListener<SimulationData> {

    private static Logger logger = LoggerFactory.getLogger(
            TimeStampSimulationDialog.class);
    
    private Frame parentFrame;
    private List<String> errorList = new ArrayList<String>();
    private AtomicLong numRequestOK  = new AtomicLong(0);
    private AtomicLong numRequestERROR  = new AtomicLong(0);
    private AtomicBoolean isExecuting  = new AtomicBoolean(false);
    private Future<Respuesta<SimulationData>> executingTask = null;
    
    public TimeStampSimulationDialog(Frame parent, boolean modal) {
        super(parent, modal);
        this.parentFrame = parent;
        initComponents();
        setLocationRelativeTo(null);   
        errorsButton.setVisible(false);
        dataEditorPane.setContentType("text/html");
        dataEditorPane.setEditable(false); 
        dataEditorPane.setText(getScreenMessage());
        showMessage(null);
        setTitle(ContextoPruebas.INSTANCE.getString("timeStampSimulationDialogCaption"));
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        simulationButton = new javax.swing.JButton();
        cerrarButton = new javax.swing.JButton();
        errorsButton = new javax.swing.JButton();
        digitalClockPanel = new org.sistemavotacion.test.panel.DigitalClockPanel();
        beginLabel = new javax.swing.JLabel();
        beginValueLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        serverURLLabel = new javax.swing.JLabel();
        serverURLTextField = new javax.swing.JTextField();
        numRequestLabel = new javax.swing.JLabel();
        numRequestTextField = new javax.swing.JTextField();
        maxPendingResponsesLabel = new javax.swing.JLabel();
        maxPendingResponsesTextField = new javax.swing.JTextField();
        dataScrollPane = new javax.swing.JScrollPane();
        dataEditorPane = new javax.swing.JEditorPane();
        messagePanel = new javax.swing.JPanel();
        messageLabel = new javax.swing.JLabel();
        closePanelLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        simulationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gnome-run.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/sistemavotacion/test/dialogo/Bundle"); // NOI18N
        simulationButton.setText(bundle.getString("DatosSimulacionDialog.aceptarButton.text")); // NOI18N
        simulationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulationButtonActionPerformed(evt);
            }
        });

        cerrarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel_16x16.png"))); // NOI18N
        cerrarButton.setText(bundle.getString("DatosSimulacionDialog.cerrarButton.text")); // NOI18N
        cerrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarButtonActionPerformed(evt);
            }
        });

        errorsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/error.png"))); // NOI18N
        errorsButton.setText(bundle.getString("AnularVotosDialog.erroresAnulacionButton.text")); // NOI18N
        errorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorsButtonActionPerformed(evt);
            }
        });

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("org/sistemavotacion/test/dialogo/simulaciones/Bundle"); // NOI18N
        beginLabel.setText(bundle1.getString("TimeStampSimulationDialog.beginLabel.text")); // NOI18N

        beginValueLabel.setBackground(java.awt.Color.white);
        beginValueLabel.setText(bundle1.getString("TimeStampSimulationDialog.beginValueLabel.text")); // NOI18N

        durationLabel.setText(bundle1.getString("TimeStampSimulationDialog.durationLabel.text")); // NOI18N

        serverURLLabel.setText(bundle1.getString("TimeStampSimulationDialog.serverURLLabel.text")); // NOI18N

        serverURLTextField.setText(bundle1.getString("TimeStampSimulationDialog.serverURLTextField.text")); // NOI18N

        numRequestLabel.setText(bundle1.getString("TimeStampSimulationDialog.numRequestLabel.text")); // NOI18N

        numRequestTextField.setText(bundle1.getString("TimeStampSimulationDialog.numRequestTextField.text")); // NOI18N

        maxPendingResponsesLabel.setText(bundle1.getString("TimeStampSimulationDialog.maxPendingResponsesLabel.text")); // NOI18N

        maxPendingResponsesTextField.setText(bundle1.getString("TimeStampSimulationDialog.maxPendingResponsesTextField.text")); // NOI18N

        dataScrollPane.setViewportView(dataEditorPane);

        messagePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        closePanelLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.gif"))); // NOI18N
        closePanelLabel.setText(bundle1.getString("TimeStampSimulationDialog.closePanelLabel.text")); // NOI18N
        closePanelLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closePanelLabelcloseMensajeUsuario(evt);
            }
        });

        javax.swing.GroupLayout messagePanelLayout = new javax.swing.GroupLayout(messagePanel);
        messagePanel.setLayout(messagePanelLayout);
        messagePanelLayout.setHorizontalGroup(
            messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closePanelLabel))
        );
        messagePanelLayout.setVerticalGroup(
            messagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(messagePanelLayout.createSequentialGroup()
                .addComponent(closePanelLabel)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dataScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errorsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(simulationButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cerrarButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serverURLLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverURLTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(beginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(beginValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(durationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(digitalClockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(numRequestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numRequestTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(maxPendingResponsesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxPendingResponsesTextField))
                    .addComponent(messagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(digitalClockPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(beginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(beginValueLabel)
                        .addComponent(durationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverURLLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numRequestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numRequestTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxPendingResponsesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxPendingResponsesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cerrarButton)
                    .addComponent(simulationButton)
                    .addComponent(errorsButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void showMessage(String mensaje) {
        if(mensaje == null) {
            messagePanel.setVisible(false);
        }else {
            messageLabel.setText(mensaje);
            messagePanel.setVisible(true);
        }
        pack();
    }

    private void simulationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulationButtonActionPerformed
        try {
            if(!isExecuting.get()) {
                logger.debug("start simulation");
                SimulationData simulationData = new SimulationData();
                simulationData.setAccessControlURL(serverURLTextField.getText().trim());
                simulationData.setNumRequestsProjected(Integer.valueOf(
                        numRequestTextField.getText().trim()));
                simulationData.setMaxPendingResponses(Integer.valueOf(
                        maxPendingResponsesTextField.getText().trim()));
                TimeStampSimulator timeStampSimulator = new TimeStampSimulator(
                        simulationData, this);
                numRequestOK.set(0);
                numRequestERROR.set(0);
                executingTask = ContextoPruebas.INSTANCE.submitSimulation(timeStampSimulator);
                simulationButton.setIcon(new javax.swing.ImageIcon(getClass().
                        getResource("/images/loading.gif")));
                simulationButton.setText("Parar simulación");
                digitalClockPanel.start(DigitalClockPanel.Mode.STOPWATCH);
            } else {
                logger.debug("cancel simulation");
                if(executingTask != null) executingTask.cancel(true);
                isExecuting.set(false);
            }
            showMessage(null);
        } catch(Exception ex) {
            logger.error(ex.getMessage(), ex);
            showMessage(ex.getMessage());
        }

    }//GEN-LAST:event_simulationButtonActionPerformed

    private void cerrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarButtonActionPerformed
        dispose();
        System.exit(0);
    }//GEN-LAST:event_cerrarButtonActionPerformed

    private void errorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorsButtonActionPerformed
        InfoErroresDialog infoErroresDialog = new InfoErroresDialog(
            parentFrame, true, "Errores en las anulaciones", errorList);
        infoErroresDialog.setVisible(true);
    }//GEN-LAST:event_errorsButtonActionPerformed

    private void closePanelLabelcloseMensajeUsuario(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closePanelLabelcloseMensajeUsuario
        showMessage(null);
    }//GEN-LAST:event_closePanelLabelcloseMensajeUsuario

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimeStampSimulationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimeStampSimulationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimeStampSimulationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimeStampSimulationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName() );
                    TimeStampSimulationDialog dialog = new TimeStampSimulationDialog(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch(Exception ex) {
                    logger.error(ex.getMessage(), ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel beginLabel;
    private javax.swing.JLabel beginValueLabel;
    private javax.swing.JButton cerrarButton;
    private javax.swing.JLabel closePanelLabel;
    private javax.swing.JEditorPane dataEditorPane;
    private javax.swing.JScrollPane dataScrollPane;
    private org.sistemavotacion.test.panel.DigitalClockPanel digitalClockPanel;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JButton errorsButton;
    private javax.swing.JLabel maxPendingResponsesLabel;
    private javax.swing.JTextField maxPendingResponsesTextField;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JLabel numRequestLabel;
    private javax.swing.JTextField numRequestTextField;
    private javax.swing.JLabel serverURLLabel;
    private javax.swing.JTextField serverURLTextField;
    private javax.swing.JButton simulationButton;
    // End of variables declaration//GEN-END:variables

    @Override public void processResponse(Respuesta<SimulationData> respuesta) {
        switch(respuesta.getCodigoEstado()) {
            case Respuesta.SC_FINALIZADO:
                digitalClockPanel.stop();
                isExecuting.set(false);
                String beginStr = DateUtils.getStringFromDate(
                        respuesta.getData().getBeginDate());
                beginValueLabel.setText(beginStr);
                simulationButton.setIcon(new javax.swing.ImageIcon(getClass().
                        getResource("/images/gnome-run.png")));
                simulationButton.setText("Comenzar simulación");
                break;
            case Respuesta.SC_OK:
                numRequestOK.getAndIncrement();
                break;
            default:
                numRequestERROR.getAndIncrement();
                errorList.add(respuesta.getMensaje());
                if(!errorList.isEmpty()) errorsButton.setVisible(true);
                break;
        }
        dataEditorPane.setText(getScreenMessage());
    }
    
    private String getScreenMessage() {
        String message = "<html><b>Num. request OK:<b>" + numRequestOK.get() + 
                "<br/><b>Num. request ERROR:<b>" + numRequestERROR.get() + "</html>";
        return message;
    }

}
