version = '0.5.0'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

repositories {
	mavenLocal()
	mavenCentral()
 }

ext {
  mainClass = "org.sistemavotacion.test.MainFrame"
}

dependencies {
	
	compile project(':HerramientaValidacionCopiasDeSeguridad')
	
	compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
	
	groovy "org.codehaus.groovy:groovy:${groovyVersion}"
	
	compile ('org.apache.httpcomponents:httpmime:4.2.4',
		'org.apache.httpcomponents:httpclient:4.2.4',
		'net.sf.json-lib:json-lib:2.4:jdk15',
		'org.bouncycastle:bcprov-jdk16:1.46',
		'org.bouncycastle:bcmail-jdk16:1.46',
		'javax.mail:mail:1.4.1',
		'javax.activation:activation:1.1.1',
		'org.slf4j:slf4j-log4j12:1.5.8',
		'org.bouncycastle:bctsp-jdk16:1.46',
		'log4j:log4j:1.2.12',
		'com.miglayout:miglayout:3.7.4:swing',
		'org.swinglabs:swingx:1.6.1',
		'commons-io:commons-io:2.1',
		'com.itextpdf:itextpdf:5.1.3')
	testCompile 'junit:junit:4.8.2'
	
}

task buildJar(type:VotingSystemApplet){
	manifest {
		attributes 'Main-Class': 'org.sistemavotacion.test.MainFrame',
				   'url':'https://github.com/jgzornoza/TestSistemaVotacion',
				   'provider': 'GruposP2P'
	}
}

cleanCompileJava.dependsOn ':HerramientaValidacionCopiasDeSeguridad:install'
classes.dependsOn cleanCompileJava
buildJar.dependsOn classes


task copyKeyTestStores() {
	if(!file("$rootProject.projectDir/mockDnie.jks").exists()) {
		tasks.getByPath(':genAppsCerts').execute()
	}
	if(!file("$rootProject.projectDir/SistemaVotacionControlAcceso/web-app/WEB-INF/cms/ControlAcceso.jks").exists()) {
		tasks.getByPath(':genWebAppsCerts').execute()
	}
	ant.copy(file:"$rootProject.projectDir/mockDnie.jks",
		toFile:"src/main/resources/mockDnie.jks")
	ant.copy(file:"$rootProject.projectDir/SistemaVotacionControlAcceso/web-app/WEB-INF/cms/ControlAcceso.jks",
		toFile:"src/main/resources/ControlAcceso.jks")
}


task copyToLib(type: Copy) {
	into "$buildDir/jarDeps/lib"
	from configurations.runtime
}
 
task runApp(dependsOn: buildJar) << { task ->
	Process proc = ["java", "-cp", 
		task.project.sourceSets.main.runtimeClasspath.asPath,
		"org.sistemavotacion.test.MainFrame"].execute() 
    proc.consumeProcessErrorStream(System.err) 
    proc.consumeProcessOutputStream(System.out) 
    if (proc.waitFor() != 0) { 
        throw new RuntimeException('exec failed') 
    } 
} 

task runVoting(dependsOn: ['classes'], type: JavaExec) {
	
	
	doFirst {
		File simulationDataFile = file('simulationData.json')
		
		println "${simulationDataFile.text}"
		
		args simulationDataFile.text
		//args "-h"
		main = 'org.sistemavotacion.test.simulacion.HeadlessSimulation'
		classpath = sourceSets.main.runtimeClasspath
	}
	
}


sourceSets {
	main {
	  //to override the defaults:
	  //output.resourcesDir = 'out/res'
	  output.classesDir   = "$buildDir/classes"
	}
}
