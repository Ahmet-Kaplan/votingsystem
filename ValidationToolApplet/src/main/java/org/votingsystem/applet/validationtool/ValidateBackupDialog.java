package org.votingsystem.applet.validationtool;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Future;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;

import org.votingsystem.applet.validationtool.backup.ClaimBackupValidator;
import org.votingsystem.applet.validationtool.backup.ManifestBackupValidator;
import org.votingsystem.applet.validationtool.backup.ValidationEvent;
import static org.votingsystem.applet.validationtool.backup.ValidationEvent.*;
import org.votingsystem.applet.validationtool.backup.ValidatorListener;
import org.votingsystem.applet.validationtool.backup.VotingBackupValidator;
import org.votingsystem.applet.validationtool.model.MetaInf;
import org.votingsystem.model.ResponseVS;
import static org.votingsystem.model.TypeVS.SIGN_EVENT;
import static org.votingsystem.model.TypeVS.CLAIM_EVENT;
import static org.votingsystem.model.TypeVS.VOTING_EVENT;

import org.votingsystem.model.ContextVS;

import org.apache.log4j.Logger;



/**
* @author jgzornoza
* Licencia: https://github.com/jgzornoza/SistemaVotacion/wiki/Licencia
*/
public class ValidateBackupDialog extends JDialog 
        implements ValidatorListener<ValidationEvent> {
    
    private static Logger logger = Logger.getLogger(ValidateBackupDialog.class);

    private List<String> errorList;
    private MetaInf metaInf;
    private int filesProcessed = 0;
    private Future<ResponseVS> runningTask;
    private MensajeDialog errorDialog;
    
    public ValidateBackupDialog(java.awt.Frame parent, 
            MetaInf metaInf, boolean modal) {
        super(parent, modal);
        initComponents();
        errorsButton.setVisible(false);
        this.metaInf = metaInf;
        //approximate
        long filesToProcess = 0;
        
        addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent e) {
                logger.debug(" - window closed event received");
            }

            public void windowClosing(WindowEvent e) {
                logger.debug(" - window closing event received");
            }
        });
        switch(metaInf.getType()) {
            case SIGN_EVENT:
                setTitle(ContextVS.INSTANCE.getString(
                        "validateManifestBackupCaption"));
                filesToProcess = metaInf.getNumSignatures();
                break;
            case VOTING_EVENT:
                setTitle(ContextVS.INSTANCE.getString(
                        "validateVotingBackupCaption"));
                filesToProcess = metaInf.getNumAccessRequest() + metaInf.getNumVotes() + 
                    metaInf.getRepresentativesData().getNumRepresented() + 
                    metaInf.getRepresentativesData().getNumRepresentativesWithAccessRequest();
                break;
            case CLAIM_EVENT:
                setTitle(ContextVS.INSTANCE.getString(
                        "validateClaimBackupCaption"));
                filesToProcess = metaInf.getNumSignatures();
                break;
        }
        progressBar.setMaximum(new Long(filesToProcess).intValue());
        progressBar.setStringPainted(true);
        setLocationRelativeTo(null);
        resultIconLabel.setVisible(false);
    }
    
    public void initValidation(String decompressedBackupBaseDir) throws Exception {
        switch(metaInf.getType()) {
            case VOTING_EVENT:
                VotingBackupValidator votingBackupValidator = new VotingBackupValidator(
                    decompressedBackupBaseDir, this);
                runningTask = ValidationToolContext.INSTANCE.submit(votingBackupValidator);
                break;
            case SIGN_EVENT:
                ManifestBackupValidator manifestBackupValidator = new ManifestBackupValidator(
                    decompressedBackupBaseDir, this);
                runningTask = ValidationToolContext.INSTANCE.submit(manifestBackupValidator); 
                break;
            case CLAIM_EVENT:
                ClaimBackupValidator claimBackupValidator = new ClaimBackupValidator(
                    decompressedBackupBaseDir, this);
                runningTask = ValidationToolContext.INSTANCE.submit(claimBackupValidator); 
                break;
        }
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        messageLabel = new javax.swing.JLabel();
        resultIconLabel = new javax.swing.JLabel();
        errorsButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        messageLabel.setText(" ");
        messageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        resultIconLabel.setText(" ");
        resultIconLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(resultIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(resultIconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        errorsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/error_16x16.png"))); // NOI18N
        errorsButton.setText("Errorres");
        errorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorsButtonActionPerformed(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/cancel_16x16.png"))); // NOI18N
        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(errorsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(errorsButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void errorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorsButtonActionPerformed
        String resultMessange = "";
        int numError = 0;
        for(String error: errorList) {
            resultMessange = resultMessange + "<br/> *** " + ++numError + " - " + error;
        }
        if(errorDialog == null) errorDialog = new MensajeDialog(
                new JFrame(), false);
        errorDialog.setMessage("<html>" + resultMessange + "</html>", 
                ContextVS.INSTANCE.getString("votingBackupErrorCaption"));
    }//GEN-LAST:event_errorsButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton errorsButton;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JPanel panel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel resultIconLabel;
    // End of variables declaration//GEN-END:variables
   
    @Override public void processValidationEvent(
            ResponseVS<ValidationEvent> validationEventResponse) {
        switch(metaInf.getType()) {
            case SIGN_EVENT:
                processManifestValidationEvent(validationEventResponse);
                break;
            case VOTING_EVENT:
                processVotingValidationEvent(validationEventResponse);
                break;
            case CLAIM_EVENT:
                processClaimValidationEvent(validationEventResponse);
                break;
        }
    }
    
    public void processVotingValidationEvent(
            ResponseVS<ValidationEvent> responseVS) {
        if(ResponseVS.SC_OK != responseVS.getStatusCode()) {
            this.errorList = responseVS.getErrorList();
            if(!errorList.isEmpty()) {
                errorsButton.setVisible(true);
                String msg = null;
                if(errorList.size() > 1) {
                    msg = ContextVS.INSTANCE.getString("errorsLbl");
                } else msg = ContextVS.INSTANCE.getString("errorLbl");
                errorsButton.setText(errorList.size() + " " + msg);
            }
        }
        progressBar.setValue(filesProcessed++);
        switch(responseVS.getData()) {
             case REPRESENTATIVE:
                 messageLabel.setText(ContextVS.INSTANCE.getString(
                         "validatingRepresentativeDataMsg"));
                 break;
             case REPRESENTATIVE_FINISH:
                break;                  
             case ACCESS_REQUEST:
                 messageLabel.setText(ContextVS.INSTANCE.getString(
                         "validatingAccessRequestsMsg"));
                 break;
             case ACCESS_REQUEST_FINISH:
                 break;                 
             case VOTE:
                 messageLabel.setText(ContextVS.INSTANCE.getString(
                         "validatingVotesMsg"));
                 break;
             case VOTE_FINISH:
                 String message = null;
                 if(errorList == null || errorList.isEmpty()) {
                        resultIconLabel.setIcon(new ImageIcon(getClass().getResource(
                             "/resources/images/accep_32x32.png")));
                        message = ContextVS.INSTANCE.getString(
                                "validationWithoutErrorsMsg",responseVS.getMessage());
                 } else {
                     resultIconLabel.setIcon(new ImageIcon(getClass().getResource(
                             "/resources/images/cancel_32x32.png")));
                     message = ContextVS.INSTANCE.getString(
                                "validationWithErrorsMsg", responseVS.getMessage());
                 }
                 cancelButton.setText(ContextVS.INSTANCE.
                        getString("closeLbl"));
                 messageLabel.setText(message);
                 resultIconLabel.setVisible(true);
                 progressBar.setVisible(false);
                 pack();
                 break;
        }
    }
    
    public void processManifestValidationEvent(
            ResponseVS<ValidationEvent> respuesta) {
    }
    
    public void processClaimValidationEvent(
        ResponseVS<ValidationEvent> responseVS) {
        if(ResponseVS.SC_OK != responseVS.getStatusCode()) {
            this.errorList = responseVS.getErrorList();
            if(!errorList.isEmpty()) {
                errorsButton.setVisible(true);
                String msg = null;
                if(errorList.size() > 1) {
                    msg = ContextVS.INSTANCE.getString("errorsLbl");
                } else msg = ContextVS.INSTANCE.getString("errorLbl");
                errorsButton.setText(errorList.size() + " " + msg);
            }
        }
        progressBar.setValue(filesProcessed++);
        switch(responseVS.getData()) {
             case CLAIM:
                 messageLabel.setText(ContextVS.INSTANCE.getString(
                         "validatingClaimsDataMsg"));
                 break;
             case CLAIM_FINISH:
                 String message = null;
                 if(errorList == null || errorList.isEmpty()) {
                    resultIconLabel.setIcon(new ImageIcon(getClass().getResource(
                         "/resources/images/accep_32x32.png")));
                    message = ContextVS.INSTANCE.getString(
                            "validationWithoutErrorsMsg",responseVS.getMessage());
                 } else {
                     resultIconLabel.setIcon(new ImageIcon(getClass().getResource(
                             "/resources/images/cancel_32x32.png")));
                     message = ContextVS.INSTANCE.getString(
                                "validationWithErrorsMsg", responseVS.getMessage());
                 }
                 cancelButton.setText(ContextVS.INSTANCE.
                        getString("closeLbl"));
                 messageLabel.setText(message);
                 resultIconLabel.setVisible(true);
                 progressBar.setVisible(false);
                 pack();
                 break;
        }
    }
    
}