package org.votingsystem.applet.validationtool;

import java.io.File;
import java.util.UUID;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;
import org.apache.log4j.Logger;
import org.votingsystem.applet.model.AppletOperation;
import org.votingsystem.model.ContextVS;
import org.votingsystem.model.ResponseVS;

/**
* @author jgzornoza
* Licencia: https://github.com/jgzornoza/SistemaVotacion/wiki/Licencia
*/
public class DialogoPrincipal extends javax.swing.JDialog {
        
    private static Logger logger = Logger.getLogger(DialogoPrincipal.class);

    java.awt.Frame parentFrame;
    
    /** Creates new form DialogoPrincipal */
    public DialogoPrincipal(java.awt.Frame parentFrame, boolean modal) {
        super(parentFrame, modal);
        initComponents();
        this.parentFrame = parentFrame;
        setLocationRelativeTo(null);   
        setTitle(ContextVS.INSTANCE.getString("dialogoPrincipalCaption"));
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        abrirArchivoFirmadoButton = new javax.swing.JButton();
        abrirZipCopiaRespaldoButton = new javax.swing.JButton();
        cerrarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        abrirArchivoFirmadoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/fileopen16x16.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/votingsystem/applet/validationtool/Bundle"); // NOI18N
        abrirArchivoFirmadoButton.setText(bundle.getString("DialogoPrincipal.abrirArchivoFirmadoButton.text")); // NOI18N
        abrirArchivoFirmadoButton.setName("abrirArchivoFirmadoButton"); // NOI18N
        abrirArchivoFirmadoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivoFirmadoButtonActionPerformed(evt);
            }
        });

        abrirZipCopiaRespaldoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/zip_16x16.png"))); // NOI18N
        abrirZipCopiaRespaldoButton.setText(bundle.getString("DialogoPrincipal.abrirZipCopiaRespaldoButton.text")); // NOI18N
        abrirZipCopiaRespaldoButton.setName("abrirZipCopiaRespaldoButton"); // NOI18N
        abrirZipCopiaRespaldoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirZipCopiaRespaldoButtonActionPerformed(evt);
            }
        });

        cerrarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/cancel_16x16.png"))); // NOI18N
        cerrarButton.setText(bundle.getString("DialogoPrincipal.cerrarButton.text")); // NOI18N
        cerrarButton.setName("cerrarButton"); // NOI18N
        cerrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(abrirZipCopiaRespaldoButton, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(abrirArchivoFirmadoButton, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(cerrarButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abrirArchivoFirmadoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(abrirZipCopiaRespaldoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cerrarButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirZipCopiaRespaldoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirZipCopiaRespaldoButtonActionPerformed
        logger.debug("abrirZipCopiaRespaldoButtonActionPerformed");
        try {
            final JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new FileFilter() {
                @Override
                public boolean accept(File f) {
                    return f.getName().toLowerCase().endsWith(".zip") || f.isDirectory();
                }

                public String getDescription() {
                    return "ZIP Files";
                }
            });
            int returnVal = chooser.showOpenDialog(parentFrame);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File result = chooser.getSelectedFile();
                String outputFolder = ValidationToolContext.DEFAULTS.APPTEMPDIR + 
                    File.separator + UUID.randomUUID();
                final DecompressFileDialog dialog = new DecompressFileDialog(
                    new JFrame(), true);
                boolean unzipFinished = dialog.unZipBackup(
                        result.getAbsolutePath(), outputFolder);
                if(unzipFinished) {
                    VisualizadorDeEventoFirmadoDialog visualizador =
                        new VisualizadorDeEventoFirmadoDialog(parentFrame, false);
                    visualizador.setVisible(outputFolder);
                }  
            }
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
        }
    }//GEN-LAST:event_abrirZipCopiaRespaldoButtonActionPerformed

    private void abrirArchivoFirmadoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoFirmadoButtonActionPerformed
        logger.debug("Abriendo archivo firmado");
        VisualizadorDeEventoFirmadoDialog visualizador =
                        new VisualizadorDeEventoFirmadoDialog(parentFrame, false);
        File file = visualizador.abrirArchivoFirmado();
        if (file != null) visualizador.setVisible(true);
    }//GEN-LAST:event_abrirArchivoFirmadoButtonActionPerformed

    private void cerrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarButtonActionPerformed
        ContextVS.INSTANCE.sendMessageToHost(
                new AppletOperation(ResponseVS.SC_CANCELLED));
        dispose();
    }//GEN-LAST:event_cerrarButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrirArchivoFirmadoButton;
    private javax.swing.JButton abrirZipCopiaRespaldoButton;
    private javax.swing.JButton cerrarButton;
    // End of variables declaration//GEN-END:variables
}
