<%@ page contentType="text/html; charset=UTF-8" %>

<link href="${elementURL}/eventVSElection/eventvs-election.vsp" rel="import"/>
<link href="${resourceURL}/vs-pager/vs-pager.html" rel="import"/>

<dom-module name="eventvs-election-list" attributes="url eventvstype eventVSState">
    <template>
        <style>
        .card { position: relative; display: inline-block; width: 300px; vertical-align: top;
            box-shadow: 0 5px 5px 0 rgba(0, 0, 0, 0.24); margin: 10px;
        }
        </style>
        <vs-innerpage-signal id="innerpageSignal" caption="${msg.electionSystemLbl}"></vs-innerpage-signal>
        <iron-ajax id="ajax" url="{{url}}" last-response="{{eventsVSMap}}" handle-as="json"
                   content-type="application/json"></iron-ajax>
        <iron-signals on-iron-signal-eventvs-election-closed="closeEventVSDetails"></iron-signals>
        <core-animated-pages hidden="{{loading}}" id="pages" flex selected="{{page}}" on-iron-animated-pages-transition-end="{{transitionend}}"
                             transitions="cross-fade-all">
            <section id="page1">
                <div cross-fade>
                    <div class="layout horizontal center center-justified">
                        <select id="eventVSStateSelect" style="margin:10px auto 0px auto;color:black; width: 300px;"
                                on-change="eventVSStateSelect" class="form-control">
                            <option value="ACTIVE" style="color:#388746;"> - ${msg.selectOpenPollsLbl} - </option>
                            <option value="PENDING" style="color:#fba131;"> - ${msg.selectPendingPollsLbl} - </option>
                            <option value="TERMINATED" style="color:#cc1606;"> - ${msg.selectClosedPollsLbl} - </option>
                        </select>
                    </div>
                    <div class="layout flex horizontal wrap around-justified">
                        <template repeat="{{eventvs in eventsVSMap.eventVS}}">
                            <div on-tap="showEventVSDetails" class='card eventDiv {{getEventVSClass(eventvs.state)}}'>
                                <div class='eventSubjectDiv layout horizontal center center-justified'>
                                    <p style='margin:0px 0px 0px 0px;text-align:center;'>{{getSubject(eventvs.subject)}}</p></div>
                                <div class='eventBodyDiv'>
                                    <div class='eventDateBeginDiv'>
                                        <div class='eventDateBeginLblDiv'>${msg.dateLbl}: </div>
                                        <div class='eventDateBeginValueDiv'>{{getDate(eventvs.dateBegin)}}</div>
                                    </div>
                                    <div class='eventAuthorDiv'>
                                        <div class='eventAuthorLblDiv'>${msg.publishedByLbl}:</div>
                                        <div class='eventAuthorValueDiv'>{{eventvs.userVS}}</div>
                                    </div>
                                    <div hidden="{{eventvs.state !== 'CANCELED'}}" class='cancelMessage'>
                                        ${msg.eventCancelledLbl}
                                    </div>
                                </div>
                                <div class='eventDivFooter'>
                                    <div class='eventRemainingDiv'>{{getElapsedTime(eventvs.dateFinish)}}</div>
                                    <div class='eventStateDiv'>{{getMessage(eventvs.state)}}</div>
                                </div>
                            </div>
                        </template>
                    </div>
                    <vs-pager id="vspager" on-pager-change="pagerChange" max="{{eventsVSMap.max}}" style="margin: 0 0 100px 0;"
                              next="${msg.nextLbl}" previous="${msg.previousLbl}"
                              first="${msg.firstLbl}" last="${msg.lastLbl}"
                              offset="{{eventsVSMap.offset}}" total="{{eventsVSMap.totalCount}}"></vs-pager>
                </div>
            </section>

            <section id="page2">
                <div cross-fade>
                    <eventvs-election id="eventvsDetails" fab-visible="true"></eventvs-election>
                </div>
            </section>
        </core-animated-pages>

    </template>
    <script>
        Polymer({
            is:'eventvs-election-list',
            publish: {
                eventsVSMap: {value: {}}
            },
            ready:function(e) {
                console.log(this.tagName + " - ready")
                this.loading = true
                this.groupvsData = {}
                this.page = 0;
                if(this.eventVSState) this.$.eventVSStateSelect.value = this.eventVSState
            },
            getDate:function(dateStamp) {
                return new Date(dateStamp).getDayWeekFormat()
            },
            eventsVSMapChanged:function() {
                this.loading = false
            },
            ready :  function(e) {
                console.log(this.tagName + " - ready")
                this.loading = true
                this.page = 0;
                if(this.eventVSState) this.$.eventVSStateSelect.value = this.eventVSState
            },
            closeEventVSDetails:function(e, detail, sender) {
                console.log(this.tagName + " - closeEventVSDetails")
                this.$.innerpageSignal.fireSignal()
                this.page = 0;
            },
            pagerChange:function(e) {
                var optionSelected = this.$.eventVSStateSelect.value
                console.log("eventVSStateSelect: " + optionSelected)
                this.$.vspager.style.display = 'none'
                targetURL = "${restURL}/eventVSElection?menu=" + menuType + "&eventVSState=" +
                        optionSelected + "&max=" + e.detail.max + "&offset=" + e.detail.offset
                console.log(this.tagName + " - pagerChange - targetURL: " + targetURL)
                history.pushState(null, null, targetURL);
                this.$.ajax.url = targetURL
                this.$.ajax.generateRequest()
            },
            showEventVSDetails :  function(e) {
                console.log(this.tagName + " - showEventVSDetails")
                this.$.eventvsDetails.fireSignal()
                this.$.eventvsDetails.eventvs = e.model.item;
                this.page = 1;
            },
            getRepresentativeName:function(groupvs) {
                return groupvs.representative.firstName + " " + groupvs.representative.lastName
            },
            getSubject:function(eventSubject) {
                return eventSubject.substring(0,50) + ((eventSubject.length > 50)? "...":"");
            },
            getMessage : function (eventVSState) {
                switch (eventVSState) {
                    case EventVS.State.ACTIVE: return "${msg.openLbl}"
                    case EventVS.State.PENDING: return "${msg.pendingLbl}"
                    case EventVS.State.TERMINATED: return "${msg.closedLbl}"
                    case EventVS.State.CANCELED: return "${msg.cancelledLbl}"
                }
            },
            getElapsedTime: function(dateStamp) {
                return new Date(dateStamp).getElapsedTime() + " ${msg.toCloseLbl}"
            },
            getEventVSClass:function(eventVSState) {
                switch (eventVSState) {
                    case EventVS.State.ACTIVE: return "eventVSActive"
                    case EventVS.State.PENDING: return "eventVSPending"
                    case EventVS.State.TERMINATED: return "eventVSFinished"
                    case EventVS.State.CANCELED: return "eventVSFinished"
                }
            },
            eventVSStateSelect: function() {
                var optionSelected = this.$.eventVSStateSelect.value
                console.log("eventVSStateSelect: " + optionSelected)
                targetURL = "${restURL}/eventVSElection?menu=" + menuType + "&eventVSState=" + optionSelected
                history.pushState(null, null, targetURL);
                this.$.ajax.url = targetURL
                this.$.ajax.generateRequest()
            }
        });
    </script>
</dom-module>