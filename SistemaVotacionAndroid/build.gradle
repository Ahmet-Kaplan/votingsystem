apply plugin: 'android'

buildscript {
  repositories { mavenCentral() }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}

repositories {
    mavenCentral()
}

android {

    defaultConfig { }

    signingConfigs {
        release {
            storeFile file("$rootProject.projectDir/mockDnie.jks")
            storePassword rootProject.keyStorePassword
            keyAlias rootProject.signKeyAlias
            keyPassword rootProject.keyStorePassword
        }
    }


    compileSdkVersion 17
    buildToolsVersion "18.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 16
    }

    sourceSets {
        main {
            java {
                srcDirs = ["src/main/java", "src/bc/java", "src/itext/java"]
            }
        }
    }

    buildTypes {
        debug { }
        release {
            signingConfig signingConfigs.release
        }

    }

    applicationVariants.all { variant ->
        variant.outputFile = file("${signedAppName}.apk")
    }
}

dependencies {
    compile 'com.google.android:support-v4:r7'
    compile ('org.apache.httpcomponents:httpmime:4.2.2') {
        exclude module: 'httpcore'
    }
}

preBuild.dependsOn 'setAndroidEnv'

task release(dependsOn:'build') <<  {
    rootProject.ext.set("aplicacionAndroid",file("${signedAppName}.apk"))
    announce.announce("Aplicaci\u00f3n Android firmada", "local")
}


task setAndroidEnv() << {
	def env = System.getenv()
	//env.each{println it} 
	String androidHome= env['ANDROID_HOME']
	if(!androidHome) throw new RuntimeException('Android SDK not Found you must install -> http://developer.android.com/sdk/index.html')
	String serverIP
	
	if(rootProject.hasProperty("SERVER_IP")) {
		serverIP = "$rootProject.SERVER_IP"
	} else serverIP = getDevelopmentServerIP()

	println " -------------> serverIP: ${serverIP}"
	
	java.util.Properties props = new Properties();
	String lastIp = null
	if(file('src/main/assets/VotingSystem.properties').exists()) {
		props.load(new FileInputStream(file('src/main/assets/VotingSystem.properties')))
		lastIp= "${props.DEVELOPMENT_IP}"
	}
	
	def controlAccesoURL = "$rootProject.controlAccesoProtocol://" + 
		"${serverIP}:$rootProject.controlAccesoPort" + 
		"$rootProject.controlAccesoPath";
	println("controlAccesoURL: $controlAccesoURL")
	ant.delete(file:"src/main/assets/VotingSystem.properties")
	ant.copy(file:"$rootProject.projectDir/templates/VotingSystem.properties",
		toFile:"src/main/assets/VotingSystem.properties")
	ant.replace(file:"src/main/assets/VotingSystem.properties",
		token:"[CONTROL_ACCESO_URL]",
		value:controlAccesoURL)
	ant.replace(file:"src/main/assets/VotingSystem.properties",
		token:"[DEVELOPMENT_IP]",
		value:serverIP)
	
	if(lastIp) {//other way
		File manifest = file("src/main/AndroidManifest.xml");
		String manifestContent = manifest.text;
		manifestContent = manifestContent.replaceAll(
			"android:host=\"${lastIp}\"", "android:host=\"${serverIP}\"")
		manifest.write(manifestContent);
		println "last development IP: ${lastIp} - new development IP: ${serverIP}"
	}
}


def getDevelopmentServerIP() {
	Enumeration<NetworkInterface> nets = NetworkInterface.getNetworkInterfaces();
	for (NetworkInterface netint : Collections.list(nets)){
		Enumeration<InetAddress> inetAddresses = netint.getInetAddresses();
		for (InetAddress inetAddress : Collections.list(inetAddresses)) {
			if(inetAddress.isSiteLocalAddress()) {
				String inetAddressStr = inetAddress.toString();
				while(inetAddressStr.startsWith("/"))
					inetAddressStr = inetAddressStr.substring(1)
				return inetAddressStr
			}
			
		}
	}
}

