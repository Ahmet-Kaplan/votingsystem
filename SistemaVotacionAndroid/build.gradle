import java.net.*;
import java.util.Properties;

import org.ajoberstar.gradle.git.tasks.*


apply plugin: 'java'

buildscript {
  repositories { mavenCentral() }
  dependencies { classpath 'org.ajoberstar:gradle-git:0.2.3' }
}

dependencies {
	archives ('org.apache.httpcomponents:httpmime:4.2.2') {
		exclude module: 'httpcore'
	}
}

task antDebugInstall(dependsOn:'cleanAndroid') << {
	ProcessBuilder pb = new ProcessBuilder("ant", "debug", "install");
	pb.directory(projectDir);
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('antDebugInstall failed')
	}
	announce.announce("$project.name - Done antDebugInstall", "local")
}

task cleanAndroid << {
	ProcessBuilder pb = new ProcessBuilder("ant", "clean");
	pb.directory(projectDir);
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('antDebugInstall failed')
	}
}

task releaseUnSigned(dependsOn:'cleanAndroid') <<  {
	ProcessBuilder pb = new ProcessBuilder("ant", "release");
	pb.directory(projectDir);
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('release failed')
	}
}

task signRelease(dependsOn:'releaseUnSigned') <<  {
	ant.signjar(keystore: "$rootProject.projectDir/mockDnie.jks",
		storepass:rootProject.keyStorePassword,
		alias:rootProject.signKeyAlias,
		jar:"bin/Aplicacion-release-unsigned.apk",
		signedjar:"bin/Aplicacion-release.apk")
}


task zipalign(dependsOn:'signRelease') <<  {
	ProcessBuilder pb = new ProcessBuilder("zipalign", "-v", "4", 
		"bin/Aplicacion-release.apk", "bin/${signedAppName}.apk");
	pb.directory(projectDir);
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('release failed')
	}
}

task release(dependsOn:'zipalign') <<  {
	rootProject.ext.set("aplicacionAndroid",file("bin/${signedAppName}.apk"))
	announce.announce("AplicaciÃ³n Android firmada", "local")
}

task cloneActionBarSherlockGitRepo(type: GitClone) {
        def destination = file("../ActionBarSherlock")
        uri = "https://github.com/JakeWharton/ActionBarSherlock.git"
        destinationPath = destination
        bare = false
        enabled = !destination.exists() //to clone only once
}

task setActionBarSherlockEnv << {
	def actionBarSherlockLibBuild = file("../ActionBarSherlock/library/build.xml")
	if(actionBarSherlockLibBuild.exists()) return
	ProcessBuilder pb = new ProcessBuilder("android", "update", "project", "-p", ".");
	pb.directory(file("../ActionBarSherlock/library"));
	Process proc = pb.start();
	proc.consumeProcessErrorStream(System.err)
	proc.consumeProcessOutputStream(System.out)
	if (proc.waitFor() != 0) {
		throw new RuntimeException('antDebugInstall failed')
	}
}

task copyToLib(type: Copy) {
	into "libs"
	from project.configurations.archives
}

task checkDependencies(dependsOn:['copyToLib',
	'setAndroidEnv', 'setActionBarSherlockEnv']) << {}

task setAndroidEnv << {
	def env = System.getenv()
	//env.each{println it} 
	String androidHome= env['ANDROID_HOME']
	if(!androidHome) throw new RuntimeException('Android SDK not Found you must install -> http://developer.android.com/sdk/index.html')
	String developmentServerIP = getDevelopmentServerIP()
	
	
	java.util.Properties props = new Properties();
	String lastIp = null
	if(file('assets/VotingSystem.properties').exists()) {
		props.load(new FileInputStream(file('assets/VotingSystem.properties')))
		lastIp= "${props.DEVELOPMENT_IP}"
	}
	
	def controlAccesoURL = "$rootProject.controlAccesoProtocol://" + 
		"${developmentServerIP}:$rootProject.controlAccesoPort" + 
		"$rootProject.controlAccesoPath";
	println("controlAccesoURL: $controlAccesoURL")
	ant.delete(file:"assets/VotingSystem.properties")
	ant.copy(file:"$rootProject.projectDir/templates/VotingSystem.properties",
		toFile:"assets/VotingSystem.properties")
	ant.replace(file:"assets/VotingSystem.properties",
		token:"[CONTROL_ACCESO_URL]",
		value:controlAccesoURL)
	ant.replace(file:"assets/VotingSystem.properties",
		token:"[DEVELOPMENT_IP]",
		value:developmentServerIP)
	
	if(lastIp) {//other way
		File manifest = file("AndroidManifest.xml");
		String manifestContent = manifest.text;
		manifestContent = manifestContent.replaceAll(
			"android:host=\"${lastIp}\"", "android:host=\"${developmentServerIP}\"")
		manifest.write(manifestContent);
		println "last development IP: ${lastIp} - new development IP: ${developmentServerIP}"
	}
}


def getDevelopmentServerIP() {
	Enumeration<NetworkInterface> nets = NetworkInterface.getNetworkInterfaces();
	for (NetworkInterface netint : Collections.list(nets)){
		Enumeration<InetAddress> inetAddresses = netint.getInetAddresses();
		for (InetAddress inetAddress : Collections.list(inetAddresses)) {
			if(inetAddress.isSiteLocalAddress()) {
				String inetAddressStr = inetAddress.toString();
				while(inetAddressStr.startsWith("/"))
					inetAddressStr = inetAddressStr.substring(1)
				return inetAddressStr
			}
			
		}
	}
}

setActionBarSherlockEnv.dependsOn cloneActionBarSherlockGitRepo
release.dependsOn checkDependencies
antDebugInstall.dependsOn checkDependencies
